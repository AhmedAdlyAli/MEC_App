{
    "type": "class",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "alternateClassName": [
            "Ext.Global"
        ],
        "designer|userAlias": "",
        "designer|userClassName": "Global",
        "singleton": true
    },
    "name": "MyClass1",
    "designerId": "9ce4c185-2173-4269-af48-0fe93a6e6860",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "LoadLocalization",
                "implHandler": [
                    "        var loc = Ext.create('MEC_App.controller.LocAr');",
                    "        loc.Load(this);",
                    ""
                ]
            },
            "name": "LoadLocalization",
            "designerId": "2d8bda64-846f-41b7-89bb-59a8de4c58dc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view"
                ],
                "fn": "GetViewTitle",
                "implHandler": [
                    "//return '<div class=toplogo></div>';",
                    "",
                    "return this.ViewTitles[view];"
                ]
            },
            "name": "GetViewTitle",
            "designerId": "e8dae46a-895d-4524-9af1-492443bcd1da"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "content"
                ],
                "fn": "GetGenericContent",
                "implHandler": [
                    "        return this.GenericContent[content];"
                ]
            },
            "name": "GetGenericContent",
            "designerId": "62b3797f-f72d-4d3e-a23e-1face50bb8f8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "title"
                ],
                "fn": "GetComplaintsTitle",
                "implHandler": [
                    "return this.ComplaintsLabels[title];",
                    "",
                    ""
                ]
            },
            "name": "GetComplaintsTitle",
            "designerId": "e6e9e5b4-8228-40dc-a7be-9057e29ff23f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "msg"
                ],
                "fn": "GetValidationMsg",
                "implHandler": [
                    "         return this.ValidationMsg[msg];",
                    ""
                ]
            },
            "name": "GetValidationMsg",
            "designerId": "3408a3fe-65b7-431e-8ce1-d42529afdf9d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "msg"
                ],
                "fn": "GetConfirmationMsg",
                "implHandler": [
                    "         return this.ConfirmationMsg[msg];",
                    ""
                ]
            },
            "name": "GetConfirmationMsg",
            "designerId": "5efa3be2-c8e5-467e-bbf9-c833af8da070"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "key"
                ],
                "fn": "GetConfig",
                "implHandler": [
                    "",
                    "var config={",
                    "",
                    "    webServiceUrl : 'https://webservicesstg.mec.gov.qa/MECBSSGateway/mecbssgw/bssgateway/accept',",
                    "    supplyWebServiceUrl: 'http://supply-staging.mec.gov.qa/mservice.svc',",
                    "    CMSWSUrl : 'http://196.205.5.28:333/MEC/api'",
                    "",
                    "",
                    "};",
                    "",
                    "",
                    "return config[key];"
                ]
            },
            "name": "GetConfig",
            "designerId": "3243ead4-4c45-483d-9329-4adf3b4d6a88"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "GetFixedTitle",
                "implHandler": [
                    "        return '<img src=\"resources/images/toplogo.png\" />';"
                ]
            },
            "name": "GetFixedTitle",
            "designerId": "773e14eb-da0d-4e5e-8d81-81a222325b77"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "LoadSessionVariables",
                "implHandler": [
                    "        this.isLogged = false;",
                    "        this.userToken ='';",
                    "        this.identityType  ='';",
                    "        this.identityNum  ='';",
                    "        this.identityNationality  ='';",
                    "",
                    "",
                    ""
                ]
            },
            "name": "LoadSessionVariables",
            "designerId": "504f0fca-dc44-446c-94ab-46e4795c2db5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view"
                ],
                "fn": "RedirectLoggedUser",
                "implHandler": [
                    "if(Ext.Global.isLogged){",
                    "    Ext.Viewport.getActiveItem().push({",
                    "        xtype: view,",
                    "        title: Ext.Global.GetFixedTitle()",
                    "    });",
                    "}else{",
                    "    Ext.Viewport.getActiveItem().push({",
                    "        xtype: 'LoginFomView',",
                    "        title: Ext.Global.GetFixedTitle(),",
                    "        data: view",
                    "    });",
                    "",
                    "",
                    "}"
                ]
            },
            "name": "RedirectLoggedUser",
            "designerId": "2abfead6-622c-4ad0-8f7d-3d01b8a845b4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "viewData"
                ],
                "fn": "RedirectToView",
                "implHandler": [
                    "",
                    "",
                    "",
                    "if (viewData.Url.indexOf('http')>-1){",
                    "",
                    "",
                    "    if(viewData.OpenExternalWindow){",
                    "",
                    "",
                    "        window.open(viewData.Url,'_system');",
                    "",
                    "",
                    "",
                    "",
                    "    }else{",
                    "        Ext.Viewport.getActiveItem().push({",
                    "            xtype: 'WebFrameView',",
                    "            title: Ext.Global.GetFixedTitle(),",
                    "            data: viewData",
                    "        });",
                    "",
                    "    }",
                    "",
                    "}else{",
                    "",
                    "    if(viewData.RequireLogin)",
                    "    {",
                    "        Ext.Global.RedirectLoggedUser(viewData.Url);",
                    "",
                    "    }else{",
                    "        Ext.Viewport.getActiveItem().push({",
                    "            xtype: viewData.Url,",
                    "            title: Ext.Global.GetFixedTitle()",
                    "        });",
                    "    }",
                    "",
                    "}"
                ]
            },
            "name": "RedirectToView",
            "designerId": "36027d06-d226-40d0-b194-11cca50f4cf1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "JsonDate"
                ],
                "fn": "FormatJsonDate",
                "implHandler": [
                    "",
                    "var ds = JsonDate;",
                    "",
                    "function timeconvert(ds){",
                    "        var D, dtime, T, tz, off,",
                    "        dobj= ds.match(/(\\d+)|([+-])|(\\d{4})/g);",
                    "        T= parseInt(dobj[0]);",
                    "        tz= dobj[1];",
                    "        off= dobj[2];",
                    "        if(off){",
                    "            off= (parseInt(off.substring(0, 2), 10)*3600000)+",
                    "(parseInt(off.substring(2), 10)*60000);",
                    "            if(tz== '-') off*= -1;",
                    "        }",
                    "        else off= 0;",
                    "        return new Date(T+= off).toUTCString();",
                    "    }",
                    "",
                    "var date = timeconvert(JsonDate);",
                    "",
                    "",
                    "var dateFormat = function () {",
                    "\tvar\ttoken = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,",
                    "\t\ttimezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,",
                    "\t\ttimezoneClip = /[^-+\\dA-Z]/g,",
                    "\t\tpad = function (val, len) {",
                    "\t\t\tval = String(val);",
                    "\t\t\tlen = len || 2;",
                    "\t\t\twhile (val.length < len) val = \"0\" + val;",
                    "\t\t\treturn val;",
                    "\t\t};",
                    "",
                    "\t// Regexes and supporting functions are cached through closure",
                    "\treturn function (date, mask, utc) {",
                    "\t\tvar dF = dateFormat;",
                    "",
                    "\t\t// You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)",
                    "\t\tif (arguments.length == 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {",
                    "\t\t\tmask = date;",
                    "\t\t\tdate = undefined;",
                    "\t\t}",
                    "",
                    "\t\t// Passing date through Date applies Date.parse, if necessary",
                    "\t\tdate = date ? new Date(date) : new Date;",
                    "\t\tif (isNaN(date)) throw SyntaxError(\"invalid date\");",
                    "",
                    "\t\tmask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);",
                    "",
                    "\t\t// Allow setting the utc argument via the mask",
                    "\t\tif (mask.slice(0, 4) == \"UTC:\") {",
                    "\t\t\tmask = mask.slice(4);",
                    "\t\t\tutc = true;",
                    "\t\t}",
                    "",
                    "\t\tvar\t_ = utc ? \"getUTC\" : \"get\",",
                    "\t\t\td = date[_ + \"Date\"](),",
                    "\t\t\tD = date[_ + \"Day\"](),",
                    "\t\t\tm = date[_ + \"Month\"](),",
                    "\t\t\ty = date[_ + \"FullYear\"](),",
                    "\t\t\tH = date[_ + \"Hours\"](),",
                    "\t\t\tM = date[_ + \"Minutes\"](),",
                    "\t\t\ts = date[_ + \"Seconds\"](),",
                    "\t\t\tL = date[_ + \"Milliseconds\"](),",
                    "\t\t\to = utc ? 0 : date.getTimezoneOffset(),",
                    "\t\t\tflags = {",
                    "\t\t\t\td:    d,",
                    "\t\t\t\tdd:   pad(d),",
                    "\t\t\t\tddd:  dF.i18n.dayNames[D],",
                    "\t\t\t\tdddd: dF.i18n.dayNames[D + 7],",
                    "\t\t\t\tm:    m + 1,",
                    "\t\t\t\tmm:   pad(m + 1),",
                    "\t\t\t\tmmm:  dF.i18n.monthNames[m],",
                    "\t\t\t\tmmmm: dF.i18n.monthNames[m + 12],",
                    "\t\t\t\tyy:   String(y).slice(2),",
                    "\t\t\t\tyyyy: y,",
                    "\t\t\t\th:    H % 12 || 12,",
                    "\t\t\t\thh:   pad(H % 12 || 12),",
                    "\t\t\t\tH:    H,",
                    "\t\t\t\tHH:   pad(H),",
                    "\t\t\t\tM:    M,",
                    "\t\t\t\tMM:   pad(M),",
                    "\t\t\t\ts:    s,",
                    "\t\t\t\tss:   pad(s),",
                    "\t\t\t\tl:    pad(L, 3),",
                    "\t\t\t\tL:    pad(L > 99 ? Math.round(L / 10) : L),",
                    "\t\t\t\tt:    H < 12 ? \"a\"  : \"p\",",
                    "\t\t\t\ttt:   H < 12 ? \"am\" : \"pm\",",
                    "\t\t\t\tT:    H < 12 ? \"A\"  : \"P\",",
                    "\t\t\t\tTT:   H < 12 ? \"AM\" : \"PM\",",
                    "\t\t\t\tZ:    utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),",
                    "\t\t\t\to:    (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),",
                    "\t\t\t\tS:    [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]",
                    "\t\t\t};",
                    "",
                    "\t\treturn mask.replace(token, function ($0) {",
                    "\t\t\treturn $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);",
                    "\t\t});",
                    "\t};",
                    "}();",
                    "",
                    "// Some common format strings",
                    "dateFormat.masks = {",
                    "\t\"default\":      \"ddd mmm dd yyyy HH:MM:ss\",",
                    "\tshortDate:      \"m/d/yy\",",
                    "\tmediumDate:     \"mmm d, yyyy\",",
                    "\tlongDate:       \"mmmm d, yyyy\",",
                    "\tfullDate:       \"dddd, mmmm d, yyyy\",",
                    "\tshortTime:      \"h:MM TT\",",
                    "\tmediumTime:     \"h:MM:ss TT\",",
                    "\tlongTime:       \"h:MM:ss TT Z\",",
                    "\tisoDate:        \"yyyy-mm-dd\",",
                    "\tisoTime:        \"HH:MM:ss\",",
                    "\tisoDateTime:    \"yyyy-mm-dd'T'HH:MM:ss\",",
                    "\tisoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"",
                    "};",
                    "",
                    "// Internationalization strings",
                    "dateFormat.i18n = {",
                    "\tdayNames: [",
                    "\t\t\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",",
                    "\t\t\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"",
                    "\t],",
                    "\tmonthNames: [",
                    "\t\t\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",",
                    "\t\t\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"",
                    "\t]",
                    "};",
                    "",
                    "// For convenience...",
                    "Date.prototype.format = function (mask, utc) {",
                    "\treturn dateFormat(this, mask, utc);",
                    "};",
                    "",
                    "",
                    "return dateFormat(date, \"ddd, mmm dS, yyyy\");",
                    ""
                ]
            },
            "name": "FormatJsonDate",
            "designerId": "fc5bde52-4939-476f-9e44-de6c1e96cb62"
        }
    ]
}
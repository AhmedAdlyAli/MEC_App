["function _1bf3997f997c8aa97c9a689a775acf5c1a264451(){};",79088,36,91,1048485,1048576,100064,"@class Ext.Decorator\n * @extends Ext.Component\n *\n * In a few words, a Decorator is a Component that wraps around another Component. A typical example of a Decorator is a\n * {@link Ext.field.Field Field}. A form field is nothing more than a decorator around another component, and gives the\n * component a label, as well as extra styling to make it look good in a form.\n *\n * A Decorator can be thought of as a lightweight Container that has only one child item, and no layout overhead.\n * The look and feel of decorators can be styled purely in CSS.\n *\n * Another powerful feature that Decorator provides is config proxying. For example: all config items of a\n * {@link Ext.slider.Slider Slider} also exist in a {@link Ext.field.Slider Slider Field} for API convenience.\n * The {@link Ext.field.Slider Slider Field} simply proxies all corresponding getters and setters\n * to the actual {@link Ext.slider.Slider Slider} instance. Writing out all the setters and getters to do that is a tedious task\n * and a waste of code space. Instead, when you sub-class Ext.Decorator, all you need to do is to specify those config items\n * that you want to proxy to the Component using a special 'proxyConfig' class property. Here's how it may look like\n * in a Slider Field class:\n *\n *     Ext.define('My.field.Sli",1452954,32,"Decorato",1159615,43,"component: {\n *                 xtype: 'slider",1164908,47,"proxyConfig: {\n *             minValue: 0,\n *             maxValue: 100,\n *             increment: 1\n *         }\n *",260080,36,"Once `My.field.Slider` class is created, it will have all setters and getters methods for all items listed in `proxyConfig`\n * automatically generated. These methods all proxy to the same method names that exist within the Component instance.\n */\nExt.define('Ext.Decorator",1000495,36,"isDecorator",1402271,51,"Object} component The config object to factory the Component that this Decorator wraps around\n         */\n        component: {}\n    }",548045,33,"ProxySetter",170621,38,1395775,38,"component = this.getComponent();\n                component[name].call(component, valu",283856,46,";\n        },\n        generateProxyGetter",170621,38,227840,33,"component = this.getComponent();\n                return component[name].call(component",1721951,32,550078,40,551468,48,"proxyConfig'",1319584,47,550221,34,"proxyConfig = members.proxyConfig",551603,37,";\n        members",550364,41,"proxyConfig) : proxyConfig;\n        var name, nameMap, setName, getName;\n        for (name in proxyConfig) {\n            if (proxyC",1010893,46,551108,59,198979,78,"members[setName] = this.generateProxySetter(setName);\n                members[getName] = this.generateProxyGetter(ge",511456,36,"},\n    // @private\n    applyComponent",1011435,36,"Ext.factory(config, Ext.Component);\n    },\n    // @private\n    updateComponent: function(newComponent, oldComponent) {\n        if (oldComponent) {\n    ",1057403,33,"oldComponent",1058140,35,"    oldComponent",1057478,48,"    this,\n                    oldComponent,\n    ",1058255,34,"    ], 'doUnsetComponent', this, {\n",791146,52,"oldComponent\n",1145403,38,"}",120432,41,"his.doUnsetComponent(oldComponent",1053968,42,"Component) {\n    ",1057403,33,"newComponent",1057440,34,"    newComponent",1057478,48,"    this,\n                    newComponent,\n",289082,41,"], 'doSetComponent', this, {\n",791146,52,"newComponent\n",1145403,38,"}",120432,41,"his.doSetComponent(newComponent",20784,32,",\n    // @private\n    doUns",1066991,47,"component",871456,34,"component.setLayoutSizeFlags(0);\n",1846544,34,"removeChild(component.renderElement.dom);\n        }\n    },\n    // @private\n    doS",1066991,47,"component",871456,34,"component.setLayoutSizeFlags(this.getSizeFlags());\n",1846544,34,"appendChild(component.renderElement.dom);\n        }\n    },\n    // @private",1063789,47,"var component;",1771949,39,") {\n            component = this.getComponent();\n    ",1699419,37,"    component",1064018,107,"/ @private\n    set",784713,39,853087,32,"    this.getComponent().setDisabled(disabled",816701,44,"Ext.destroy(this.getComponent())",1007680,34,1022724,228,1149100,71,1148926,3976,"private\n */\nExt.define('Ext.field.Inpu",1000494,37,"xtype: 'input',\n    /**\n     * @event clearicontap\n     * Fires whenever the clear icon is tapped.\n     * @param {Ext.field.Input} this",1023977,64,"/**\n     * @event masktap\n     * @preventable doMaskTap\n     * Fires whenever a mask is tapped.\n     * @param {Ext.field.Input} this",1023977,51,956160,32,"focus\n     * @preventable doFocus\n     * Fires whenever the input get focus.",1023977,51,956160,32,"blur\n     * @preventable doBlur\n     * Fires whenever the input loses focus.",1023977,51,956160,32,"click\n     * Fires whenever the input is clicked.",1023977,51,956160,32,"keyup\n     * Fires whenever keyup is detected.",1023977,51,956160,32,"paste\n     * Fires whenever paste is detected.",1023977,51,956160,32,"mousedown\n     * Fires whenever the input has a mousedown occur.",1023977,51,".",1689888,35,"String} tag The el tag.\n     * @private\n     */\n    tag: 'input',\n    cachedC",1188304,46,"cls The `className` to be applied to this inpu",1222975,44,"cls: Ext.baseCSSPrefix + 'form-field",1221408,32,"String} focusCls The CSS class to use when the field receives focu",1606288,44,"focusCls: Ext.baseCSSPrefix + 'field-focus',\n        // @private\n        maskCls: Ext.baseCSSPrefix + 'field-mask',\n        /**\n          * @cfg {String/Boolean} useMask\n         * `true` to use a mask on this field, or `auto` to automatically select when you should use it",1614000,32,1449135,34,"Mask",1189133,39,"String} type The type attribute for input fields -- e.g. radio, text, password.\n         *\n         * If you want to use a `file` input, please use the {@link Ext.field.File} component instea",1037775,44,"type: 'tex",849200,42,"checked `true` if the checkbox should render initially check",1037774,45,"checked: false",1252062,49,1023338,74,"field-inpu",849200,33,"String} name The field's HTML name attribute.\n         * __Note:__ This property must be set if this field is to be automatically included with\n         * {@link Ext.form.Panel#method-submit form submit()",1457407,44,1422767,41,"Mixed} value A value to initialize this field with",836480,43,"value",1037824,32,"property {Boolean} `true` if the field currently has focu",1606288,44,"isFocu",1530222,41,"Number} tabIndex The `tabIndex` for this field.",520411,33,"This only applies to fields that are rendered, not those which are built via `applyTo`",836480,43,"tabIndex",1240512,45,"placeHolder A string value displayed in the input (if supported) when the control is empty",836480,44,"laceHold",1153791,39,"Number} [minValue=undefined] The minimum value that this Number field can accept (defaults to `undefined`, e.g. no minimum",1367776,44,"minValue",1037824,37,"Number} [maxValue=undefined] The maximum value that this Number field can accept (defaults to `undefined`, e.g. no maximum",1367776,44,"maxValue",1037824,37,"Number} [stepValue=undefined] The amount by which the field is incremented or decremented each time the spinner is tapped.",1088179,35,", which means that the field goes up or down by 1 each time the spinner is tapp",1037774,45,"stepValue",1037824,37,"Number} [maxLength=0] The maximum number of permitted input character",1606288,44,"maxLength",1037824,46,"[autoComplete=undefined]\n         * `true` to set the field's DOM element `autocomplete` attribute to `\"on\"`, `false` to set to `\"off\"`. Defaults to `undefined`, leaving the attribute unset",1605696,47,"Complete",1037824,46,"[autoCapitalize=undefined]\n         * `true` to set the field's DOM element `autocapitalize` attribute to `\"on\"`, `false` to set to `\"off\"`. Defaults to `undefined`, leaving the attribute unset",1605488,46,"Capitaliz",1153454,32,"`true` to set the field DOM element `autocorrect` attribute to `\"on\"`, `false` to set to `\"off\"`. Defaults to `undefined`, leaving the attribute unset.\n         * @cfg {Boolean} autoCorrect",1605488,46,"Correc",930688,38,"Boolean} [readOnly=undefined]\n         * `true` to set the field DOM element `readonly` attribute to `\"true\"`. Defaults to `undefined`, leaving the attribute unse",1222975,44,"readOnly",1037824,37,"Number} [maxRows=undefined]\n         * Sets the field DOM element `maxRows` attribute. Defaults to `undefined`, leaving the attribute unset",1037776,44,"axRow",1224160,44,"} pattern The value for the HTML5 `pattern` attribute.\n         * You can use this to change which keyboard layout will be used",1214480,32,"define('Ux.field.Pattern', {\n         *         extend : 'Ext.field.Text',\n         *         xtype  : 'patternfield",155856,33,"config : {\n         *             component : {\n         *                 pattern : '[0-9]*",1610559,89,"Even though it extends {@link Ext.field.Text}, it will display the number keyboard",752400,54,"pattern",1037824,46,"[disabled=false] `true` to disable the field.\n         *\n         * Be aware that conformant with the [HTML specification](http://www.w3.org/TR/html401/interact/forms.html),\n         * disabled Fields will not be {@link Ext.form.Panel#method-submit submitted",1457407,44,"/**\n         * @cfg {Mixed} startValue\n         * The value that the Field had at the time it was last focused. This is the value that is passed\n         * to the {@link Ext.field.Text#change} event which is fired if the value has been changed when the Field is blurred.\n         *\n         * __This will be `undefined` until the Field has been visited.__ Compare {@link #originalValue}",1293984,44,"tartValue",1023536,36," {Boolean} fastFocus\n         *\n         * Enable Fast Input Focusing on iOS, using this workaround will stop some touchstart events in order to prevent\n         * delayed focus issue",1224080,43," */\n        fastFocus: true\n    },\n    /**\n     * @cfg {String/Number} originalValue The original value when the input is render",342606,32,"// @private",1150093,43,"items =",1080607,55,"put',\n                    tag: this.tag\n",789055,35,1735652,34,"mask',\n        ",1038432,41,"        this.config.maskCls\n",1145403,38,1735919,53,"clearIcon',\n                    cls: 'x-clear-icon'",208124,32,";",1066345,34,"ini",1800831,35,943003,33,");\n        me.input.on({\n",1049354,35,"keyup: 'onKeyUp',\n            keydown: 'onKeyDown',\n            focus: 'onFocus',\n            blur: 'onBlur',\n            input: 'onInput',\n            paste: 'onPaste',\n            tap: 'onInputTap'\n        });\n        // Stock android has a delayed mousedown event that is dispatched\n        // this prevents the mousedown from focus's an input when not intended (click a message box button or picker button that lays over an input)\n        // we then force focus on touchen",1748910,42,") {\n            me.input.dom.addEventListener(\"mousedown\"",430389,32,"if (document.activeElement != e.target) {\n        ",1828112,40,367385,34,"    me.input.dom.addEventListener(\"touchend\"",1839612,33,".focus();",857600,35,"me.mask.on({\n",1049354,35,"tap: 'onMaskTap'\n        });\n        if (me.clearIcon) {\n            me.clearIcon.on({\n                tap: 'onClearIconTap',\n                touchstart: 'onClearIconPress',\n                touchend: 'onClearIconRelease'",802502,52,"}\n        // Hack for IE10. Seems like keyup event is not fired for 'enter' keyboard button, so we use keypress event instead to handle enter.\n        if (Ext.browser.is.ie && Ext.browser.version.major >= 10) {\n            me.input.on({\n",1049350,43,"keypress: 'onKeyPress'",1630768,45,"astFocus: function(newValue) {\n        // This is used to prevent 300ms delayed focus bug on iOS\n        if (newValue) {\n            if (this.getFastFocus() && ",986348,33,"this.input.on({\n",789641,53,"touchstart: \"onTouchStart",940653,34,"}",1015152,35,"input.un({\n",789645,45,"touchstart: \"onTouchStart\"",1630768,38,"/**\n     * Manual Max Length processing is required for the stock \"Browser\" on Android",1550736,42,"'true' if non-chrome browser is detected on Android\n     */\n    useManualMaxLength",571103,38,"(Ext.os.is.Android && !Ext.browser.is.Chrome));\n    },\n    applyUseMask: function(useMask) {\n        if (useMask === 'auto') {\n            useMask = ",1712828,32,"lt('5');\n        }\n        return Boolean(useMask)",1151923,36,"useMask configuration\n     */\n    updateUseMask: function(newUseMask) {\n        this.mask[newUseMask ? 'show' : 'hide']();\n    },\n    updatePattern: function(pattern) {\n        this.updateFieldAttribute('pattern', pattern);\n    },\n    /**\n     * Helper method to update a specified attribute on the `fieldEl`, or remove the attribute all togeth",1116720,32,"updateFieldAttribute: function(attribute, newValue) {\n        var input = this.input;\n        if (!Ext.isEmpty(newValue, true)) {\n            input.dom.setAttribute(attribute, newV",1005167,36,"input.",415739,40,"}",1151924,35,"{@link #cls} configuration.\n     */\n",772222,50,"this.input.addCls(Ext.baseCSSPrefix + 'input-el');\n        this.inpu",772456,34,"},\n    /**\n     * Updates the type attribute with",858036,35,1259598,33,1411463,47,"prefix = Ext.baseCSSPrefix + 'input-';\n        this.input.replaceCls(prefix + oldType, prefix + newType);\n        this.updateFieldAttribute('type', newType)",1151923,36,"name attribute with the {@link #name",1152418,51,1237682,34,"this.updateFieldAttribute('name', newName",492288,37,"field data value.\n     * @return {Mixed} value The field value.\n     */",701887,40,"input = this.input;\n        if (input) {\n            this._value = input.dom.",704719,37,"_value;\n    },\n    // @private\n    apply",1004992,33,"return (Ext.isEmpty(value)) ? ''",644668,32,"Updates the {@link #value",1152418,51,"Value: function(newValue) {\n        var input = this.input;\n        if (input) {\n            input.dom.value = newValue;\n        }\n    },\n    setValue: function(newValue) {\n        var oldValue = this._value",1001730,32,"applyValue(newValue));\n        newV",899849,32,"if (String(newValue) != String(oldValue) && ",779616,32,"this.onChange(this, newValue, oldValue",1540128,46,"/ @private\n    applyTabIndex: function(tabIndex) {\n        if (tabIndex !== null && typeof tabI",1054964,32,"throw new Error(\"Ext.field.Field: [applyTabIndex] trying to pass a value which is not a number\");\n        }\n        return tabIndex",1151923,36,"tabIndex attribute with the {@link #tabIndex",1152016,50,"TabIndex: function(newTabIndex) {\n        this.updateFieldAttribute('tabIndex', newTabIndex);\n    },\n    // @private\n    testAutoFn",1388494,35,"[\n            true,\n            'on'\n        ].indexOf(value) !== -1;\n    },\n    applyMaxLength: function(maxLength) {\n        if (maxLength !== null && typeof maxLength != 'number'",319007,37,"field.Text: [applyMaxLength] trying to pass a value which is not a number\");\n        }\n        return maxLength",1151923,36,"`maxlength` attribute with the {@link #maxLength",1152418,52,"axLength: function(newMaxLength) {\n        if (!this.useManualMaxLength()) {\n            this.updateFieldAttribute('maxlength', newMaxLength",463328,35,"Updates the `placeholder` attribute with the {@link #placeHolder",1152418,51,"PlaceHolder: function(newPlaceHolder) {\n        this.updateFieldAttribute('placeholder', newPlaceHolder);\n    },\n    // @private\n    applyAutoComplete: function(autoComplete) {\n        return this.testAutoFn(autoComplete)",1151923,36,"`autocomplete` attribute with the {@link #autoComplete",1152418,51,"AutoComplete: function(newAutoComplete) {\n        var value = newAutoComplete ? 'on' : 'off';\n        this.updateFieldAttribute('autocomplete', value);\n    },\n    // @private\n    applyAutoCapitalize: function(autoCapitalize) {\n        return this.testAutoFn(autoCapitalize)",1151923,36,"`autocapitalize` attribute with the {@link #autoCapitalize",1152418,51,"AutoCapitalize: function(newAutoCapitalize) {\n        var value = newAutoCapitalize ? 'on' : 'off';\n        this.updateFieldAttribute('autocapitalize', value);\n    },\n    // @private\n    applyAutoCorrect: function(autoCorrect) {\n        return this.testAutoFn(autoCorrect)",1151923,36,"`autocorrect` attribute with the {@link #autoCorrect",1152418,51,"AutoCorrect: function(newAutoCorrect) {\n        var value = newAutoCorrect ? 'on' : 'off';\n        this.updateFieldAttribute('autocorrect', value)",1151923,36,"`min` attribute with the {@link #minValue",1152418,52,"inValue: function(newMinValue) {\n        this.updateFieldAttribute('min', newMinValue)",1151923,36,"`max` attribute with the {@link #maxValue",1152418,52,"axValue: function(newMaxValue) {\n        this.updateFieldAttribute('max', newMaxValue)",1151923,36,"`step` attribute with the {@link #stepValu",1152015,51,"StepValue: function(newStepValue) {\n        this.updateFieldAttribute('step', newStepValue);\n    },\n    // @private\n    checkedRe: /^(true|1|on)/i,\n    /**\n     * Returns the `checked` value of this field\n     * @return {Mixed} value The field value\n     */\n    getChecked: function() {\n        var el = this.input,\n            checked",487419,32,"checked = el.dom.checked;\n            this._checked = checked;\n        }\n        return checked;\n    },\n    // @private\n    applyChecked: function(checked) {\n        return !!this.checkedRe.test(String(checked));\n    },\n    setChecked: function(newChecked) {\n        this.updateChecked(this.applyChecked(newChecked));\n        this._checked = newChecked",1151923,36,"`autocorrect` attribute with the {@link #autoCorrect",1152016,50,"Checked: function(newChecked) {\n        this.input.dom.checked = newChecked",1151923,36,"`readonly` attribute with the {@link #readOnly",1152016,50,"ReadOnly: function(readOnly) {\n        this.updateFieldAttribute('readonly', readOnly ? true : null);\n    },\n    // @private\n    applyMaxRows: function(maxRows) {\n        if (maxRows !== null && typeof maxRows !== 'number'",319007,37,"field.Input: [applyMaxRows] trying to pass a value which is not a number\");\n        }\n        return maxRows;\n    },\n    updateMaxRows: function(newRows) {\n        this.updateFieldAttribute('rows', newRows);\n    },\n",784797,48,853087,32,"    if (Ext.browser.is.Safari && !",1741635,41,"input.dom.tabIndex = (disabled) ? -1 : 0;\n        }\n        this.input.dom.disabled = (Ext.browser.is.Safari && !Ext.os.is.BlackBerry) ? false : disabled;\n        if (!disabled) {\n            this.blu",1495856,37,"Returns `true` if the value of this Field has been changed from its original value.\n     * Will return `false` if the field is disabled or has not been rendered yet",1626622,41,"Dirt",546480,33,720454,61,"return String(this.getValue()) !== String(this.originalValue);\n    },\n    /**\n     * Resets the current field value to the original value.\n     */",701398,38,"setValue(this.originalValue);\n    },\n    // @private\n    onInputTap",720301,41,"inputtap",720575,36,"\n        ], 'doInputTap');\n    },\n    // @private\n    doInputTap: function(me, e) {\n        if (me",720453,62,"// Fast focus switching\n        if (this.getFastFocus() && Ext.os.is.iOS) {\n            me.focus();\n        }\n    },\n    // @private\n    onMaskTap",720301,41,"masktap",720575,36,"\n        ], 'doMaskTap');\n    },\n    // @private\n    doMaskTap: function(me, e) {\n        if (me",720453,62,"me.focus();\n    },\n    // @private\n    showMask",1260832,32,"getUseMask()) {\n            this.mask.setStyle('display', 'block');\n        }\n    },\n    // @private\n    hideMask",1260832,32,"getUseMask()) {\n            this.mask.setStyle('display', 'none",463327,36,"Attempts to set the field as the active input focus.\n     * @return {Ext.field.Input} this\n     */\n    focus",900368,50,"el = me.input;\n        if (el && el.dom.focus) {\n            el.dom.focus();",439888,52,"Attempts to forcefully blur input focus for the field.\n     * @return {Ext.field.Input",971578,37,"blu",1496048,51,"el = this.input;\n        if (el && el.dom.blur) {\n            el.dom.blur();",439888,52,"Attempts to forcefully select all the contents of the input field.\n     * @return {Ext.field.Input",971578,38,"elect",900368,50,"el = me.input;\n        if (el && el.dom.setSelectionRange) {\n            el.dom.setSelectionRange(0, 9999);",439888,41,"on",1822860,35,"ireAction('focus', [\n            e\n        ], 'doFocus');\n    },\n    // @private\n    doFocus",1759166,37,";\n        me.hideMask();\n        if (!me.getIsFocused()) {\n            me.setStart",1003076,36,"    me.setIsFocused(true)",1777213,49,"// This will prevent 300ms delayed focus from occurring on iOS\n        if (document.activeElement != e.target",1748991,50,"},\n    onBlur",720301,41,"blur', [\n            e\n        ], 'doBlur');\n    },\n    // @private\n    doBlur",1759166,51,900893,35,"startValue = me.getStartValue();\n        me.showMask();\n        me.setIsFocused(false);\n        if (String(value) != String(startValue)) {\n            me.onChange(me, value, startValue);\n        }\n    },\n    // @private\n    onClearIconTap",720301,33,"Event('clearicontap', this, e);\n        //focus the field after cleartap happens, but only on android.\n        //this is to stop the keyboard from hiding. TOUCH-2064\n   ",358441,35,"       this.focus();\n        }\n    },\n    onClearIconPress",1675553,33,"Icon.addCls(Ext.baseCSSPrefix + 'pressing');\n    },\n    onClearIconRelease",1675553,33,"Icon",471945,32,"pressing');\n    },\n    onClick",720301,33,"Event('click', e);\n    },\n    onChange: function(me, value, startValue) {\n        if (this.useManualMaxLength()) {\n            this.trimValueToMaxLength();\n        }\n",1184128,33,"me, value, startValue);\n    },\n    onPaste",1770240,33,"useManualMaxLength()) {\n            this.trimValueToMaxLength();\n        }\n        this.fireEvent('paste', e);\n    },\n    onKeyUp",1770240,33,"useManualMaxLength()) {\n            this.trimValueToMaxLength();\n        }\n        this.fireEvent('keyup', e);\n    },\n    onKeyDown: function() {\n        // tell the class to ignore the input event. this happens when we want to listen to the field change\n        // when the input autocompletes\n        this.ignoreInput = true;\n    },\n    on",1827311,33,"me = this;\n        // if we should ignore input, stop now.\n        if (me.ignoreInput) {\n            me.ignoreInput = false",1834559,40,"// set a timeout for 10ms to check if we want to stop the input event.\n        // if not, then continue with the event (keyup)",471888,45,"if (!me.ignoreInput",759913,34,"keyup', e);\n                me.ignoreInput",804400,32,"}, 10);\n    },\n    // Hack for IE10 mobile. Handle pressing 'enter' button and fire keyup event in this case.\n    onKeyPress: function(e) {\n        if (e.browserEvent.keyCode == 13",974495,32,"keyup', e);\n        }\n    },\n    onMouseDown",720301,33,"Event('mousedown', e);\n    },\n    trimValueToMaxLength: function() {\n        var maxLength = this.getMaxLength();\n        if (maxLength) {",899831,58,"value.length > this.getMaxLength()) {\n                this.setValue(value.slice(0, maxLength)",20784,32,"\n});\n\n/**\n * @aside guide forms\n *\n * Field is the base class for all form fields used in Sencha Touch. It provides a lot of shared functionality to all\n * field subclasses (for example labels, simple validation, {@link #clearIcon clearing} and tab index management), but\n * is rarely used directly. Instead, it is much more common to use one of the field subclasses:\n *\n *     xtype            Class\n *    ",730864,40,"\n *     textfield        {@link Ext.field.Text}\n *     numberfield      {@link Ext.field.Number}\n *     textareafield    {@link Ext.field.TextArea}\n *     hiddenfield      {@link Ext.field.Hidden}\n *     radiofield       {@link Ext.field.Radio}\n *     filefield        {@link Ext.field.File}\n *     checkboxfield    {@link Ext.field.Checkbox}\n *     selectfield      {@link Ext.field.Select}\n *     togglefield      {@link Ext.field.Toggle}\n *     fieldset         {@link Ext.form.FieldSet}\n *\n * Fields are normally used within the context of a form and/or fieldset. See the {@link Ext.form.Panel FormPanel}\n * and {@link Ext.form.FieldSet FieldSet} docs for examples on how to put those together, or the list of links above\n * for usage of individual field types. If you wish to create your own Field subclasses you can extend this class,\n * though it is sometimes more useful to extend {@link Ext.field.Text} as this provides additional text entry\n * functionality.\n */\nExt.define('Ext.field.Field', {\n    extend: Ext.Decorator",848912,32,"orm.Field',\n    xtype: 'field',\n    /**\n     * Set to `true` on all Ext.field.Field subclasses. This is used by {@link Ext.form.Panel#getValues} to determine which\n     * components inside a form are fields.\n     * @property isField",1361272,34,"isField: true,\n    // @private\n    isForm",1402266,54,1023338,74,"field',\n        /**\n         * The label of this field\n         * @cfg {String} label",1605488,42,"lab",1367472,39,"String} labelAlign The position to render the label relative to the field input.\n         * Available options are: 'top', 'left', 'bottom' and 'right'",1605488,42,"labelAlig",849193,40,"Number/String} labelWidth The width to make this field's label",836480,43,"labelWidth: '30%",1221408,32,"Boolean} labelWrap `true` to allow the label to wrap. If set to `false`, the label will be truncated with\n         * an ellipsi",1606288,44,"labelWrap",1023536,36," {Boolean} clearIcon `true` to use a clear icon in this fiel",1037775,44,"clearIc",1153600,39,"Boolean} required `true` to make this field required.",520411,33,"this only causes a visual indication.\n         *\n         * Doesn't prevent user from submitting the form",836480,43,"requir",1530223,34,"The label Element associated with this Field.",520411,33,"Only available if a {@link #label} is specified.\n         * @type Ext.Element\n         * @property labelEl\n         * @deprecated 2.0",1217344,42,"String} [inputType='text'] The type attribute for input fields -- e.g. radio, text, password, file.\n         * The types 'file' and 'password' must be used to render those field types currently -- there are\n         * no separate Ext components for those.\n    ",1691098,34,"`input.type` instea",1037775,44,"inputType",1240512,45,"name The field's HTML name attribute.",520411,33,"this property must be set if this field is to be automatically included with.\n         * {@link Ext.form.Panel#method-submit form submit()",1457407,44,1422767,41,"Mixed} value A value to initialize this field with",836480,43,"value",1037824,37,"Number} tabIndex The `tabIndex` for this field. Note this only applies to fields that are rendered,\n         * not those which are built via `applyTo`",836480,43,"tabIndex: null\n    },\n",1421312,33,"component The inner component for this field.\n         */\n",1293136,34,"fullscreen",1023645,34,"platformConfig: [\n        {\n            theme: [\n                'Windows',\n                'MountainView',\n                'Blackberry',\n                'Tizen'\n            ],\n            labelAlign: 'top'\n        }\n    ],\n    cachedC",1188304,46,"labelCls Optional CSS class to add to the Label",1149807,51,"label",1224158,46,"} requiredCls The `className` to be applied to this Field when the {@link #required} configuration is set",738910,53,"requiredCls: Ext.baseCSSPrefix + 'field-required",1221408,32,"String} inputCls CSS class to add to the input element of this fields {@link #component}\n         */\n        inputCls: null\n    ",696639,33,"isFocused\n     * `true` if this field is currently focus",342606,32,760638,39,"var p",1829819,35,1728384,41,",\n            className: 'x-contain",1012591,67,"reference: 'label',\n",1150571,35,"form-label",1012687,89,"reference: 'label",1151488,35,"tag: 'span'",86384,47,"]\n",789055,35,1735652,34,1038605,37,"s: prefix + 'component-outer'",1736188,55,"// @private\n    updateLabel: function(newLabel, oldLabel) {\n        var renderE",1082607,41,"p",1829819,35,"if (newLabel) {\n            this.labelspan.setHtml(newLabel);\n            renderElement.addCls(prefix + 'field-labeled",460095,33,"renderElement.removeCls(prefix + 'field-labeled');\n        }\n    },\n    // @private\n    updateLabelAlign: function(newLabelAlign, oldLabelAlign) {\n        var renderE",1082607,41,"p",1829819,35,"if (newLabelAlign) {\n            renderElement.addCls(prefix + 'label-align-' + newLabelAlign);\n            if (newLabelAlign == \"top\" || newLabelAlign == \"bottom\") {\n                this.label.setWidth('100%",390240,41,"this.updateLabelWidth(this.getLabelWidth()",1053968,39,"oldLabelAlign) {\n            renderElement.removeCls(prefix + 'label-align-' + oldLabelAlign);\n        }\n    },\n    // @private\n    updateLabelCls: function(newLabelCls, oldLabelCls) {\n        if (newLabelCls) {\n            this.label.addCls(newLabe",965170,32,"LabelCls) {\n            this.label.removeCls(oldLabelCls);\n        }\n    },\n    // @private\n    updateLabelWidth: function(newLabelWidth) {\n        var labelAlign = this.getLabelAlign();\n        if (newLabelWidth) {\n            if (labelAlign == \"top\" || labelAlign == \"bottom\") {\n                this.label.setWidth('100%",390240,41,"this.label.setWidth(newLabelWid",1003775,40,"// @private\n    updateLabelWrap: function(newLabelWrap, oldLabelWrap",1152094,43,"form-label-nowrap';\n        if (!newLabelWrap",1152173,98,"},\n",772515,35,"required",1152418,51,"Required: function(newRequired) {\n        this.renderElement[newRequired",1024940,35,"RequiredCls())",1151923,36,"{@link #required",1152016,50,"RequiredCls: function(newRequiredCls, oldRequiredCls) {\n        if (this.getRequired()",792353,35,"replaceCls(oldRequiredCls, newRequiredCls);\n        }\n    },\n    // @private",549728,38,942999,37,");\n        me.doInitValu",1192703,48,"doInitValue: function(",483966,38,"Mixed} originalValue\n         * The original value of the field as configured in the {@link #value} configuration.\n         * setting is `true`.\n         */\n        this.originalValue = this.getInitialConfig().value;\n    },\n    /**\n     * Resets the current field value back to the original value on this field when it was created.\n     *\n",1478151,33,"field with an original value\n     *     var field =",326771,35,"xtype: 'textfield',\n     *         value: 'first value'",239088,38,"pdate the value\n     *     field.setValue('new value');\n     *\n     *     // Now you can reset it back to the `first value`\n     *     field.reset();\n     *\n     * @return {Ext.field.Field} this\n     */",701398,38,"setValue(this.originalValue",472000,48,"sets the field's {@link #originalValue} property so it matches the current {@link #getValue value}. This is\n     * called by {@link Ext.form.Panel}.{@link Ext.form.Panel#setValues setValues} if the form's\n     * {@link Ext.form.Panel#trackResetOnLoad trackResetOnLoad} property is set to true.\n     */\n    resetOriginalValue: function() {\n        this.originalValue = this.getValue(",1682064,47,"value of this Field has been changed from its {@link #originalValue}.\n     * Will return `false` if the field is disabled or has not been rendered yet.\n     *",600112,38,"is field has been changed from its original value (and\n     * is not disabled)",600200,33,"isDirty",1855371,42,1204059,49,1152922,525309,"Ext.Direct aims to streamline communication between the client and server by providing a single interface that\n * reduces the amount of common code typically required to validate data and handle returned data packets (reading data,\n * error conditions, etc).\n *\n * The Ext.direct namespace includes several classes for a closer integration with the server-side. The Ext.data\n * namespace also includes classes for working with Ext.data.Stores which are backed by data from an Ext.Direct method.\n *\n * # Specification\n *\n * For additional information consult the [Ext.Direct Specification](http://sencha.com/products/extjs/extdirect).\n *\n * # Providers\n *\n * Ext.Direct uses a provider architecture, where one or more providers are used to transport data to and from the\n * server. There are several providers that exist in the core at the moment:\n *\n * - {@link Ext.direct.JsonProvider JsonProvider} for simple JSON operations\n * - {@link Ext.direct.PollingProvider PollingProvider} for repeated requests\n * - {@link Ext.direct.RemotingProvider RemotingProvider} exposes server side on the client.\n *\n * A provider does not need to be invoked directly, providers are added via {@link Ext.direct.Manager}.{@link #addProvider}.\n *\n * # Router\n *\n * Ext.Direct utilizes a \"router\" on the server to direct requests from the client to the appropriate server-side\n * method. Because the Ext.Direct API is completely platform-agnostic, you could completely swap out a Java based server\n * solution and replace it with one that uses C# without changing the client side JavaScript at all.\n *\n * # Server side events\n *\n * Custom events from the server may be handled by the client by adding listeners, for example:\n *\n *     {\"type\":\"event\",\"name\":\"message\",\"data\":\"Successfully polled at: 11:19:30 am\"}\n *\n *     // add a handler for a 'message' event sent by the server\n *     Ext.direct.Manager.on('message', function(e){\n *         out.append(String.format('<p><i>{0}</i></p>', e.data));\n *         out.el.scrollTo('t', 100000, true);",1387278,33,"alternateClassName Ext.Direct\n */\nExt.define('Ext.direct.Manag",1021898,32,1166880,62,"alternateClassName: 'Ext.Direct',\n    exceptions: {\n        TRANSPORT: 'xhr',\n        PARSE: 'parse',\n        LOGIN: 'login',\n        SERVER: 'exception'\n    },\n    /**\n     * @event event\n     * Fires after an event.\n     * @param {Ext.direct.Event} e The Ext.direct.Event type that occurred.\n     * @param {Ext.direct.Provider} provider The {@link Ext.direct.Provider Provider}",956160,32,"exception\n     * Fires after an event",1361636,32,"irect.Event} e The event type that occurre",903151,37,489263,38,"transaction",1253588,38,"this.getKey);\n        me.provid",1253586,40,"this.getKey);\n    },",1270581,50,"getId(",1267712,33,"Ext.Direct Provider and creates the proxy or stub methods to execute server-side methods. If the provider\n     * is not already connected, it will auto-connect.\n     *\n     *     Ext.direct.Manager.addProvider({\n     *         type: \"remoting\",       // create a {@link Ext.direct.RemotingProvider}\n     *         url: \"php/router.php\", // url to connect to the Ext.Direct server-side router.\n     *         actions: {              // each property within the actions object represents a Class\n     *             TestAction: [       // array of methods within each server side Class",536622,45,"name: \"doEcho\", // name of method\n     *                 len: 1\n     *             },{\n     *                 name: \"multiply\",\n     *                 len: 1\n     *             },{\n     *                 name: \"doForm\",\n     *                 formHandler: true,  // handle form on server with Ext.Direct.Transaction\n     *                 len: 1\n     *             }]",1660896,34,"namespace: \"myApplication\" // namespace to create the Remoting Provider in",312656,38,"Ext.direct.Provider/Object...} provider\n     * Accepts any number of Provider descriptions (an instance or config object for\n     * a Provider). Each Provider description instructs Ext.Direct how to create\n     * client-side stub methods",1551328,38,"addProvider: function(provid",389088,42,"rgs = Ext.toArray(arguments)",654864,34,"n;\n        if (args.length > 1) {\n            for (ln = arg",486683,37,"    me.addProvider(arg",1574464,33,"return;\n        }\n        // if provider has not already been instantiated\n        if (!provider.isProvider) {\n            provider = Ext.create('direct.' + provider.type + 'provider', provider);\n        }\n        me.providers.add(provider);\n        provider.on('data', me.onProviderData, me);\n        if (!provider.isConnected()) {\n            provider.connect();\n        }\n        return provider",562796,35," {@link Ext.direct.Provider provider} by the **{@link Ext.direct.Provider#id id}** specified when the\n     * provider is {@link #addProvider added}.\n     * @param {String/Ext.direct.Provider} id The id of the provider, or the provider instance",1551328,41,"Provider",1641087,32,"id.isProvider ? id : this.providers",567328,34,"moves the provider.\n     * @param {String/Ext.direct.Provider} provider The provider instance or the id of the provider.\n     * @return {Ext.direct.Provider/null} The provider, `null` if not found.\n     */\n    removeProvider: function(provid",389088,41,"providers = me.providers;\n        provider = provider.isProvider ? provider : providers.get(provider);\n        if (provider) {\n            provider.un('data', me.onProviderData, me);\n            providers.remove(provider);\n            return provider",481963,44,"/**\n     * Adds a transaction to the manag",1119967,35,"Ext.direct.Transaction} transaction The transaction to add\n     * @return {Ext.direct.Transaction} transaction\n     */\n    addTransaction: function(transaction) {\n        this.transactions.add(transaction);\n        return transaction",491693,33," transaction from the manag",1119967,35,"String/Ext.direct.Transaction} transaction The transaction/id of transaction to remove\n     * @return {Ext.direct.Transaction} transaction\n     */\n    removeTransaction: function(transaction) {\n        transaction = this.getTransaction(transaction);\n        this.transactions.remove(transaction);\n        return transaction;\n    },\n    /**\n     * Gets a transac",1432912,36,"String/Ext.direct.Transaction} transaction The transaction/id of transaction to get\n     * @return {Ext.direct.Transaction}\n     */\n    getTransaction: function(transaction) {\n        return Ext.isObject(transaction) ? transaction : this.transactions.get(transaction);\n    },\n    onProviderData: function(provider, ev",697280,42,"i = 0,\n            ln, name;\n        if (Ext.isArray(event)) {\n            for (ln = event",486684,36,"    me.onProviderData(provider, event",987806,32,"return;\n        }\n        name = event.getName();\n        if (name && name != 'event' && name != 'exception') {\n            me.fireEvent(name, event);\n        } else if (event.getStatus() === fals",1116158,43,"event)",944939,34,"event', event, provider)",423964,33,"direct function. It may be passed in a string format, for example:\n     * \"MyApp.Person.read\"",1450087,35,"String/Function} fn The direct fun",932257,32,"The function to use in the direct call. Null if not found\n     */\n    parseMethod: function(fn) {\n        if (Ext.isString(fn)) {\n            var parts = fn.split('.')",61504,46,"parts.length,\n                current = window;\n            while (current && i < ln) {\n                current = current[parts[i]];\n                ++i;\n            }",489899,33,"current) ? current :",1077214,32,"fn || null",1349040,41,1678252,108458,"aside guide forms\n *\n * The checkbox field is an enhanced version of the native browser checkbox and is great for enabling your user to\n * choose one or more items from a set (for example choosing toppings for a pizza order). It works like any other\n * {@link Ext.field.Field field} and is usually found in the context of a form:",1022898,46," preview\n *     var form",243053,33,1309071,45,888880,41,"xtype: 'checkboxfield',\n *                 name : 'tomato',\n *                 label: 'Tomato',\n *                 value: 'tomato',\n *                 checked: true",1310720,34,"{\n *                 xtype: 'checkboxfield',\n *                 name : 'salami',\n *                 label: 'Salami'",1310720,34,"{\n",536648,38,"*                 docked: 'bottom',\n *        ",729408,33,"        { xtype: 'spacer' },",1594246,53,"text: 'getValues',\n *                         handler: function() {",1313776,32,"var form = Ext.ComponentQuery.query('formpanel')[0]",1313775,37,"values = form.getValues()",1401006,32,"    Ext.Msg.alert(null",1313775,38,"Tomato: \" + ((values.tomato) ? \"yes\" : \"no\") +",1313776,37,"<br />Salami: \" + ((values.salami) ? \"yes\" : \"no\")",1313776,32,");\n *        ",1311230,34,1594415,35," xtype: 'spacer' }\n *",1079038,34,729703,35,"The form above contains two check boxes - one for Tomato, one for Salami. We configured the Tomato checkbox to be\n * checked immediately on load, and the Salami checkbox to be unchecked. We also specified an optional text\n * {@link #value} that will be sent when we submit the form. We can get this value using the Form's\n * {@link Ext.form.Panel#getValues getValues} function, or have it sent as part of the data that is sent when the\n * form is submitted:\n *\n *     form.getValues(); //contains a key called 'tomato' if the Tomato field is still checked\n *     form.submit(); //will send 'tomato' in the form submission data\n *\n */\nExt.define('Ext.field.Checkbox', {\n    extend: Ext.field.Field",848912,32,"orm.Checkbox',\n    xtype: 'checkboxfield',\n    qsaLeftRe: /[\\[]/g,\n    qsaRightRe: /[\\]]/g,\n    isCheckbox: true",1182316,44,"just before the field blurs if the field value",955689,33,"field.Checkbox} this This field.\n     * @param {Boolean} newValue The new value.\n     * @param {Boolean} oldValue The original value",956160,32,"check\n     * Fires when the checkbox is checked.\n     * @param {Ext.field.Checkbox} this This checkbox.",1023977,37,"is event object",956160,32,"uncheck\n     * Fires when the checkbox is unchecked.\n     * @param {Ext.field.Checkbox} this This checkbox.",1023977,37,"is event objec",1817805,52,849578,44,"ui: 'checkbox",1221408,32,"String} value The string value to submit if the item is in a checked stat",1422719,44,"value: '",1221408,32,"Boolean} checked `true` if the checkbox should render initially check",1037774,45,"check",1530223,40,"Number} tabIndex",1023645,38,"tabIndex: -1",1023616,42,"inheritdoc\n         */\n        component: {\n            xtype: 'input',\n            type: 'checkbox',\n            useMask: true",1105434,40,"input-checkbox",934719,32,"    * @cfg {Boolean} labelMaskTap",31552,37,"platformConfig: [\n        {\n            theme: [\n                'Windows',\n                'Blackberry',\n                'Tizen'\n            ],\n            labelAlign: 'left'\n        }\n    ],\n    // @private",549728,38,"var me = this,\n            component = me.getComponent();\n        me.callParent();\n        component.on({\n",1049354,35,"order: 'before',\n            masktap: 'onMaskTap'\n        });\n        component.doMaskTap = Ext.emptyFn;\n        me.label.on({\n",1049354,35,"tap: 'onMaskTap'\n        });\n    },\n    // @private\n    doIni",951468,34,"e = this,\n            initialConfig = me.getInitialConfig();\n        // you can have a value or checked config, but checked get priority\n        if (initialConfig.hasOwnProperty('value')) {\n            me.originalState = initialConfig.value;\n        }\n        if (initialConfig.hasOwnProperty('checked')) {\n            me.originalState = initialConfig.checked;\n        }",1038304,46,"// @private\n    updateInputType: function(newInputType",1021123,33,"getComponent(",1699416,40,"component.setType(newInputType);\n        }\n    },\n    // @private",1237671,45,"var component = this.getComponent(",1699416,40,"component.setName(newName",463328,35,"Returns the field checked value.\n     * @return {Mixed} The field value.\n     */\n    getChecked: function() {\n        // we need to get the latest value from the {@link #input} and then update the value\n        this._checked = this.getComponent().getChecked();\n        return this._checked",1076080,36,"submit value for the checkbox which can be used when submitting forms.\n     * @return {Boolean/String} value The value of {@link #value} or `true`, if {@link #checked}.\n     */\n    getSubmi",948656,36,"(this.getChecked()) ? Ext.isEmpty(this._value) ? true : this._value : null;\n    },\n    setChecked: function(newChecked) {\n        this.updateChecked(newChecked);\n        this._checked = newChecked;\n    },\n    updateChecked: function(newChecked) {\n        this.getComponent().setChecked(newChecked);\n        // only call onChange (which fires events) if",756848,41,784160,39,"this.onChange();\n        }\n    },\n    // @private\n    onMaskTap: function(component, ",1652080,41,"om = me.getComponent().input.dom;\n        if (me",720453,62,"//we must manually update the input dom with the new checked value\n        dom.checked = !dom.checked;\n        me.onChange(e);\n        //return false so the mask does not disappear",1694879,34,"/**\n     * Fires the `check` or `uncheck` event when the checked value of this component changes.",876112,32,"hange",1759166,51,"oldChecked = me._checked,\n            newChecked = me.getChecked();\n        // only fire the event when the value changes\n        if (oldChecked != newChecked) {\n            if (newChecked",759913,34,"check', me, e",48192,40,"me.fireEvent('uncheck', me, e",759616,32,"fireEvent('change', me, newChecked, oldCheck",1558016,38,"method\n     * Method called when this {@link Ext.field.Checkbox} has been checked.\n     */\n    doChecked: Ext.emptyFn",1192115,32,"Method called when this {@link Ext.field.Checkbox} has been unchecked.\n     */\n    doUnChecked: Ext.emptyFn,\n    /**\n     * Returns the checked state of the checkbox",416208,37,"checked",600200,33,"isCheck",1654223,37,"getChecked()",456688,32,"checked state of the checkbox to `true`.\n     * @return {Ext.field.Checkbox} This checkbox.\n     */\n    check",1688560,36,"etCheck",1198048,32,"Set the checked state of the checkbox to `false`.\n     * @return {Ext.field.Checkbox} This checkbox.\n     */\n    uncheck",1688560,36,"etChecked(false);\n    },\n    getSameGroupFields",900368,50,"component = me.up('formpanel') || me.up('fieldset'),\n            name = me.getName(),\n            replaceLeft = me.qsaLeftRe,\n            replaceRight = me.qsaRightRe,\n            //handle baseCls with multiple class values\n            baseCls = me.getBaseCls().split(' ').join('.'),\n            components = [],\n            elements, element, i, ln;\n        if (!component",1480094,33,"Ext.field.Radio components must always be descendants of an Ext.form.Panel or Ext.form.FieldSet.');\n            component = Ext.Viewport;\n        }\n        // This is to handle ComponentQuery's lack of handling [name=foo[bar]] properly\n        name = name.replace(replaceLeft, '\\\\[');\n        name = name.replace(replaceRight, '\\\\]');\n        elements = Ext.query('[name=' + name + ']', component.element.dom);\n        ln = elements.length",1304304,49,557087,35,"element = Ext.fly(element).up('.' + baseCls);\n            if (element && element.id) {\n                components.push(Ext.getCmp(element.id)",564736,42,"component",1051552,33,"an array of values from the checkboxes in the group that are checked.",1265293,36,"getGroupValues: function() {\n        var values = [];\n        this.getSameGroupFields().forE",1568079,47,"Checked()) {\n                values.push(field",899307,36,"});\n        return value",456687,33,"status of all matched checkboxes in the same group to checked.\n     * @param {Array} values An array of values.\n     * @return {Ext.field.Checkbox} This checkbox.\n     */\n    setGroupValues: function(values) {\n        this.getSameGroupFields().forE",1568079,34,"field.setChecked((values.indexOf(field.getValue()) !== -1",492112,61,"sets the status of all matched checkboxes in the same group to checked.\n     * @return {Ext.field.Checkbox} This checkbox.\n     */\n    resetGroupValue",963246,32,"SameGroupFields().forE",1568079,34,"field.setChecked(field.originalState",1253677,34,701390,46,"setChecked(this.originalState);",557373,40,"The Form panel presents a set of form fields and provides convenient ways to load and save data. Usually a form\n * panel just contains the set of fields you want to display, ordered inside the items",1338355,36,"@example\n *     var form",243053,33,1309071,45,888880,41,"xtype: 'textfield',\n *                 name: 'name',\n *                 label: 'Name'",1310720,34,"{\n *                 xtype: 'emailfield',\n *                 name: 'email',\n *                 label: 'Email'",1310720,34,"{\n *                 xtype: 'passwordfield',\n *                 name: 'password',\n *                 label: 'Password'",889200,48,"Here we just created a simple form panel which could be used as a registration form to sign up to your service. We\n * added a plain {@link Ext.field.Text text field} for the user's Name, an {@link Ext.field.Email email field} and\n * finally a {@link Ext.field.Password password field}. In each case we provided a {@link Ext.field.Field#name name}\n * config on the field so that we can identify it later on when we load and save data on the form.\n *\n * ##Loading data\n *\n * Using the form we created above, we can load data into it in a few different ways, the easiest is to use\n * {@link #setValues}:\n *\n *     form.setValues(",1521229,36,"email: 'ed@sencha.com',\n *         password: 'secret'\n *     });\n *\n * It's also easy to load",1308087,38,"s into a form - let's say we have a User model and want\n * to load a particular instance into our form:\n *",1454944,32,1414671,92,"name', 'email', 'password'",1311264,36,"var ed = Ext.creat",1452637,35,"name: 'Ed',\n *         email: 'ed@sencha.com',\n *         password: 'secret'\n *     });\n *\n *     form.setRecord(ed);\n *\n * ##Retrieving form data\n *\n * Getting data out of the form panel is simple and is usually achieve via the {@link #getValues} method:\n *\n *     var values = form.getValues();\n *\n *     //values now looks like this:\n *    ",1521228,37,"email: 'ed@sencha.com',\n *         password: 'secret'\n *     }\n *\n * It's also possible to listen to the change events on individual fields to get more timely notification of changes\n * that the user is making. Here we expand on the example above with the User model, updating the model as soon as\n * any of the fields are changed:\n *\n *     var form",243053,33,519062,40,"'> field': {\n *                 change: function(field, newValue, oldValue) {\n *                     ed.set(field.getName(), newValue);",1311227,37,"}\n *         }",887472,58,"xtype: 'textfield',\n *                 name: 'name',\n *                 label: 'Name'",1310720,34,"{\n *                 xtype: 'emailfield',\n *                 name: 'email',\n *                 label: 'Email'",1310720,34,"{\n *                 xtype: 'passwordfield',\n *                 name: 'password',\n *                 label: 'Password'",889200,50,"e above used a new capability of Sencha Touch 2.0, which enables you to specify listeners on child components of any\n * container. In this case, we attached a listener to the {@link Ext.field.Text#change change} event of each form\n * field that is a direct child of the form panel. Our listener gets the name of the field that fired the change event,\n * and updates our",1308087,39,"with the new value. For example, changing the email field\n * in the form will update the Model's email field.\n *\n * ##Submitting forms\n *\n * There are a few ways to submit form data. In our example above we have a Model instance that we have updated, giving\n * us the option to use the M",1490239,46," to persist the changes back to our server,\n * without using a traditional form submission. Alternatively, we can send a normal browser form submit using the\n * {@link #method} method:\n *\n *     form.submit({\n *         url: 'url/to/submit/to',\n *         method: 'POST',",1525133,49,"alert('form submitted successfully!",1525215,34,"In this case we provided the `url` to submit the form to inside the submit call - alternatively you can just set the\n * {@link #url} configuration when you create the form. We can specify other parameters (see {@link #method} for a\n * full list), including callback functions for success and failure, which are called depending on whether or not the\n * form submission was successful. These functions are usually used to take some action in your app after your data\n * has been saved to the server side.\n *\n * @aside guide forms\n * @aside example forms\n * @aside example forms-toolbars\n */\nExt.define('Ext.form.Panel",1678528,34,"form.FormPanel',\n    extend: Ext.Panel,\n    xtype: 'formpanel',\n    /**\n     * @event submit\n     * @preventable doSubmit\n     * Fires upon successful (Ajax-based) form submission.\n     * @param {Ext.form.Panel} this This FormPanel.\n     * @param {Object} result The result object as returned by",1644418,32,"EventObject} e The event object",956160,32,"beforesubmit\n     * @preventable doBeforeSubmit\n     * Fires immediately preceding any Form submit action.\n     * Implementations may adjust submitted form values or options prior to execution.\n     * A return value of `false` from this listener will abort the submission\n     * attempt (regardless of `standardSubmit` configuration).\n     * @param {Ext.form.Panel} this This FormPanel.\n     * @param {Object} values A hash collection of the qualified form values about to be submitted",1109294,33,"Submission options hash (only available when `standardSubmit` is `false`).",1023977,51," if the form was submitted via a HTML5 form submit event",956160,32,"exception\n     * Fires when either the Ajax HTTP request reports a failure OR the server returns a `success:false`\n     * response in the result payload.\n     * @param {Ext.form.Panel} this This FormPanel.\n     * @param {Object} result Either a failed Ext.data.Connection request object or a failed (logical) server.\n     * response payload",1817806,53,"String} baseCls",1023338,74,"form",1221408,32,"Boolean} standardSubmit\n         * Whether or not we want to perform a standard form subm",1222974,45,"standardSubmi",1023535,37,1087821,37,"url for submit",1293787,51,1195663,39,"(String} enctype\n         * The enctype attribute for the form, specifies how the form should be encoded when submitting\n         */\n        enctype",1609872,45,"baseParams\n         * Optional hash of params to be sent (when `standardSubmit` configuration is `false`) on every subm",1222974,45,"base",1089085,51,"submitOnAction\n         * When this is set to `true`, the form will automatically submit itself whenever the `action`\n         * event fires on a field in this form. The action event usually fires whenever you press\n         * go or enter inside a textfiel",1037775,44,"submitOnAction",1023536,36,1642760,44,"of this form. Can by dynamically set at any ti",1422718,45,"recor",714960,46,"method\n         * The method which this form will be submitted. `post` or `get`.\n         */\n        method: 'pos",849200,33,"Object} scrollable\n         * Possible values are true, false, and null. The true value indicates that\n         * users can scroll the panel. The false value disables scrolling, but developers\n         * can enable it in the app. The null value indicates that the object cannot be\n         * scrolled and that scrolling cannot be enabled for this object",1356154,43,"      title: 'Sliders',\n         *      xtype: 'formpanel',\n         *      iconCls: Ext.filterPlatform('blackberry') ? 'list' : null,\n         *      scrollable: true,\n         *      items: [ ...",849578,44,"scrollable: {\n    ",960384,36,"    translationMethod: 'scrollposition'",1140496,49,"@cfg {Boolean} trackResetOnLoad\n         * If set to true, {@link #reset}() resets to the last loaded or {@link #setValues}() data instead of\n         * when the form was first created.\n         */\n        trackResetOn",1479808,42,"Object} api\n         * If specified, load and submit actions will be loaded and submitted via Ext.Direct.  Methods which have been imported by\n         * {@link Ext.direct.Manager} can be specified here to load and submit forms. API methods may also be\n         * specified as strings and will be parsed into the actual functions when the first submit or load has occurred. Such as the following",1426955,54,"load: App.ss.MyProfile.load,\n         *         submit: App.ss.MyProfile.submit",1404640,44,"api: {\n         *         load: 'App.ss.MyProfile.load',\n         *         submit: 'App.ss.MyProfile.submit'",1404640,40,"Load actions can use {@link #paramOrder} or {@link #paramsAsHash} to customize how the load method\n         * is invoked.  Submit actions will always use a standard form submit. The `formHandler` configuration\n         * (see Ext.direct.RemotingProvider#action) must be set on the associated server-side method which has\n         * been imported by {@link Ext.direct.Manager}.\n         */\n        api",1240512,43,"/String[]} paramOrder\n         * A list of params to be executed server side. Only used for the {@link #api} `load`\n         *",737844,38,"Specify the params in the order in which they must be executed on the\n         * server-side as either (1) an Array of String values, or (2) a String of params\n         * delimited by either whitespace, comma, or pipe. For example,\n         * any of the following would be acceptable:\n         *\n         *     paramOrder: ['param1','param2','param3']\n         *     paramOrder: 'param1 param2 param3'\n         *     paramOrder: 'param1,param2,param3'\n         *     paramOrder: 'param1|param2|param'\n         */\n        paramOrd",1153791,39,"Boolean} paramsAsHash\n         * Only used for the {@link #api} `load` configuration. If true, parameters will be sent as a\n         * single hash collection of named arguments. Providing a {@link #paramOrder} nullifies this\n         *",844931,36,"paramsAsHash",1037824,37,"Number} timeout\n         * Timeout for form actions in seconds",1426767,33,1000704,40,"multipartDetection\n         * If this is enabled the form will automatically detect the need to use 'multipart/form-data' during submission.\n         */\n        multipartDetection",1614544,46,"enableSubmissionForm\n         * The submission form is generated but never added to the dom. It is a submittable version of your form panel, allowing for fields\n         * that are not simple textfields to be properly submitted to servers. It will also send values that are easier to parse\n         * with server side code",1608057,35,"false we will attempt to subject the raw form inside the form panel.\n         */\n        enableSubmissionForm: true",1004766,80,");\n        config.tag = \"form\";\n        // Added a submit input for standard form submission. This cannot have \"display: none;\" or it will not work\n        config.children.push({\n            tag: 'input',\n            type: 'submit',\n            style: 'visibility: hidden; width: 0; height: 0; position: absolute; right: 0; bottom: 0;",1004938,48,"// @private",549728,38,942999,37,");\n",1834819,36,"submit: 'onSubmit',\n            scope: me\n        });\n    },\n    applyEnctype: function(newValue) {\n        var form = this.element.dom || null",1108781,34,"if (newValue) {\n                form.setAttribute(\"enctype\", newValue",1508768,43,"m.setAttribute(\"enctype\"",20784,32,",\n",793957,36,") {\n        var fields, values, name;\n        if (newRecord && (fields = newRecord.fields)) {\n            values = this.getValues();\n            for (name in values) {\n                if (values.hasOwnProperty(name) && fields.containsKey(name)) {\n                    newRecord.set(name, values[name]",1282480,44,462528,44,"Loads matching fields from a model instance into this form",1638368,33,"record T",1417888,39,"form.Panel} This form.\n     */\n    setRecord",1642844,33,"me = this;\n        if (record && record.data) {\n            me.setValues(record.data);\n        }\n        me._record = record",814480,34,"// @private\n    onSubmit",1759166,37,";\n        if (e && !me.getStandardSubmit()",1024793,40," else {\n            this.submit(null, e);\n        }\n    },\n    updateSubmitOnAction: function(newSubmitOnAction) {\n        if (newSubmitOnAction) {\n            this.on({\n                action: 'onFieldAction",963004,44,963568,37,"un({\n                action: 'onFieldAction",963004,44,");\n        }\n    },\n    // @private\n    onFieldAction: function(field) {\n        if (this.getSubmitOnAction()) {\n            field.blur();\n            this.subm",1538448,39,"erforms a Ajax-based submission of form values (if {@link #standardSubmit} is false) or otherwise\n     * executes a standard HTML Form submit action.\n     *\n     * **Notes**\n     *\n     *  1. Only the first parameter is implemented. Put all other parameters inside the first\n     *  parameter:\n     *\n     *     submit({params: \"\" ,headers: \"\" etc.})\n     *\n     *  2. Submit example:\n     *\n     *     myForm.submit({\n     *       url: 'PostMyData/To',\n     *       method: 'Post',\n     *       success: function() { Ext.Msg.alert(\"success\"); },\n     *       failure: function() { Ext.Msg.alert(\"error\");",314304,32," 3. Parameters and values only submit for a POST and not for a GET.",1097328,38,"\n     * The configuration when submitting this form.\n     *\n     * The following are the configurations when submitting via Ajax only:",1093180,39,"url\n     * The url for the action (defaults to the form's {@link #url})",330703,32,"options.method\n     * The form method to use (defaults to the form's {@link #method}, or POST if not defined).",1097328,46,"\n     *",1097374,32,"action",1556684,34,"options.autoAbort=false]\n     * `true` to abort any pending Ajax request prior to submission.\n     * __Note:__ Has no effect when `{@link #standardSubmit}` is enabled",971294,32,"options.timeout\n     * The number is seconds the loading will timeout in.\n     *\n     * The following are the configurations when loading via Ajax or Direct:",312671,38,"options.params\n     * The params to pass when submitting this form (defaults to this forms {@link #baseParams}).\n     * Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}",1556684,34,"options.submitDisabled=false]\n     * `true` to submit all fields regardless of disabled state.\n     * __Note:__ Has no effect when `{@link #standardSubmit}` is enabled.",312671,38,"[options.waitMsg]\n     * If specified, the value which is passed to the loading {@link #masked mask}. See {@link #masked} for\n     *",316918,33,1094148,33,"\n     * The callback that will be invoked after a successful response. A response is successful if\n     * a response is received from the server and is a JSON object where the `success` property is set\n     * to `true`, `{\"success\": true}`.\n     *\n     *",1390189,48," and can be used for submitting via Ajax or Direct:\n     *\n     * @param {Ext.form.Panel} options.success.form\n     * The {@link Ext.form.Panel} that requested the ac",1092377,34,"/Ext.direct.Event} options.success.result\n     * The result object returned by the server as a result of the submit request. If the submit is sent using Ext.Direct,\n     * this will return the {@link Ext.direct.Event} instance, otherwise will return an Object.",1097328,39,"success.data\n     * The parsed data returned by",1646736,35,"Function} options.failure\n     * The callback that will be invoked after a failed transaction attempt.\n     *\n     *",1390189,48," and can be used for submitting via Ajax or Direct:\n     *\n     * @param {Ext.form.Panel} options.failure.form\n     * The {@link Ext.form.Panel} that requested the submit.\n     *\n     * @param {Ext.form.Panel} options.failure.result\n     * The failed response or result object returned by the server which performed the operation.",1097328,39,"success.data\n     * The parsed data returned by",1646736,35,"Object} options.scope\n     * The scope in which to call the callback functions (The `this` reference for the callback functions)",1375725,34,"Connection} The request object if the {@link #standardSubmit} config is false.\n     * If the standardSubmit config is true, then the return value is undefined.\n     */\n    submit: function(options, e) {",1552987,42,"var me = this,\n            formValues = me.getValues(me.getStandardSubmit() || !options.submitDisabled),\n            form = me.element.dom || {};\n        if (this.getEnableSubmissionForm()) {\n            form = this.createSubmissionForm(form, formValues);\n        }\n        option",1202623,33,"me.getUrl() || form.action,\n            submit: false,\n            form: form",1450513,35,") || form.method || 'post',\n            autoAbort: false,\n            params: null,\n            waitMsg: null,\n            headers: null,\n            success: null,\n            failure: null\n        }, options || {});\n        return me.fireAction('beforesubmit', [\n            me,\n            formValues,\n",1106478,33,"e\n        ], 'doBeforeSubmit');\n    },\n    createSubmissionForm: function(form, values",1481416,33,"Fields(),\n            name, input, field, fileinputElement, inputComponent;\n        if (form.nodeType === 1) {\n            form = form.cloneNode(false);\n            for (name in values) {\n               ",1852005,32,"\"input\");\n                input.setAttribute(\"type\", \"text\");\n                input.setAttribute(\"name\", name);\n                input.setAttribute(\"value\", values[name]",1104933,36,"input",354096,35,"for (name in fields) {\n            if (fields",1804352,41,"field = fields[name];\n                if (field.isFile) {\n                    if (!form.$fileswap)  {\n                        form.$fileswap = []",139472,44,"\n                    inputComponent = field.getComponent().input;\n                    fileinputElement = inputComponent.dom;\n                    input = fileinputElement.cloneNode(true);\n                    fileinputElement.parentNode.insertBefore(input, fileinputElement.nextSibling);\n    ",1104936,33,"fileinputElement);\n                    form.$fileswap",85664,32,"original: fileinputElement,\n                        placeholder: input",670490,52,"field.isPassword) {\n",1354138,33,"Component().getType !== \"password\")",1569073,32,".setRevealed",1103279,47,1066320,41,"form;\n    },\n    doBeforeSubmit: function(me, formValues, options) {\n        var form = options.form || {},\n            multipartDetected = false;\n        if (this.getMultipartDetection() === true) {\n            this.getFieldsAsArray().forE",1568079,34,"    if (field.isFile",177520,33,"multipartDetected = true;\n        ",798624,34,367385,34,"    if (multipartDetected) {\n                form.setAttribute(\"enctype\", \"multipart/form-data\"",1053968,39,"options.enctype) {\n            form.setAttribute(\"enctype\", options.enctype);\n        }\n        if (me.getStandardSubmit()) {\n            if (options.url && Ext.isEmpty(form.action)) {\n                form.action = options.url",132823,32,"pinner fields must have their components enabled *before* submitting or else the value\n            // will not be posted.\n            var fields = this.query('spinnerfield'),\n    ",1320859,44,"    i, field",284336,57,"field = fields[i];\n                if (!field.getDisabled()) {\n                    field.getComponent().setDisabled(",344414,39,"\n            form.method = (options.method || form.method).toLowerCase();\n            form.submit",870911,35,"r api = me.getApi(),\n    ",1109661,58,"    scope = options.scope || me,\n                waitMsg = options.waitMsg,\n                failureFn = function(response, responseTex",811013,33,"isFunction(o",1378028,35,"        options.failure.call(scope, me, response, responseTex",1247087,46,1431534,38,270831,39,"uccessFn = function(response, responseTex",811013,33,"isFunction(options.succ",1102832,32,"options.success.call(options.scope || me, me, response, responseTex",1247087,46,"me.fireEvent('submit', me, response",270831,39,"ubmit;\n            if (options.waitMsg) {\n                if (typeof waitMsg",1578652,37,"waitMsg =",993844,35,"loadmask',\n                        message: waitMs",940496,59,"me.setMasked(waitMsg",1100928,33,"api) {\n                submit = api.submit;\n                if (typeof submit",1578652,37,"submit = Ext.direct.Manager.parseMethod(submit);\n                    if (submit) {\n                        api.submit = submit",406608,58,"if (submi",1746166,32,"submit(this.element, function(data, response, ",1499886,35,"me.setMasked",1101452,33,1513712,39,"    if (data.",1499886,35,"        successFn(response, data",86352,32,214560,32,"        failureFn(response, data",86352,58,214560,32,"    failureFn(response, ",226557,53,"}",799501,39,"} else {\n                var request = Ext.merge({}, {\n            ",1112844,34,"            timeout: this.getTimeout() * 1000,\n                        form: form",1513376,33,"me\n                    }, options);\n                delete request.success;\n                delete request.failure;\n                request.params = Ext.merge(me.getBaseParams() || {}, options.params);\n                request.header = Ext.apply({\n                    'Content-Type'",1089372,52,"\n                }, options.headers || {});\n                request.callback = function(callbackO",1452171,41,1343165,35,".responseText,\n                        responseXML = response.responseXML,\n                        statusResult = Ext.Ajax.parseStatus(response.status, response);\n                    if (form.$fileswap",226272,33,"riginal, placeholder;\n                        Ext.each(form.$fileswap, ",1258687,37,"        original = item.original;\n                            placeholder = item.placeholder;\n                            placeholder.parentNode.insertBefore(original, placeholder.nextSiblin",91789,32,"placeholder.parentNode.removeChild(placeholder);\n",86327,52,"form.$fileswap",1101503,33,"delete form.$fileswap",139472,44,"me.setMasked(false);\n                    if (response.success === false)  {\n        ",1328632,45,1246172,51,1513712,39,"if (statusResult && responseText && responseText.length",1799805,37,"success",1721246,33,226496,37,"if (!Ext.isEmpty(response.responseBytes",4944,33,"    success = statusResult.success;\n        ",214539,53,"        if (Ext.isString(responseText) && response.",1124772,34,"text\"",296912,40,"response.success",1721246,33,125001,32,"responseTex",410271,34,395706,38,"                response",1343556,37,"            ",278797,50,"        ",1107949,50,"                ",1108120,40,46560,32,"response.message = e.message",93567,72,"} else if (Ext.isSimpleObject(responseTex",410271,34,"        response = responseText",93567,38,"Ext.applyIf(response,",93056,43,"success: true",93568,38,")",92287,34,91504,34,"if (!Ext.isEmpty(responseXML",4944,33,"        response.success",1721246,33,92384,38,"    success = !!response.success",103887,82,1513712,39,"    successFn(response, responseText",669568,64,"failureFn(response, responseText",238592,50,214560,32,"failureFn(response, responseText",100032,42,1102289,41,"2 && request.xhr2) {\n                    delete request.form;\n                    var formData = new FormData(form);\n                    if (request.params",1273568,32,"iterate(request.params,",172320,37,1106076,62,1106126,66,"            formData.appen",1106199,32,1580480,36,91584,49,"formData.appen",1106287,32,226576,38,"});",1497909,32,"request.params",139472,44,"request.data = formData",89104,43,"Ext.Ajax.request(request",20784,32,",\n    /**\n     * Performs an Ajax or Ext.Direct call to load values for this form.",1097328,38,"\n     * The configuration when loading this form.\n     *\n     * The following are the configurations when loading via Ajax only:",1093180,39,"url\n     * The url for the action (defaults to the form's {@link #url})",330703,32,"options.method\n     * The form method to use (defaults to the form's {@link #method}, or GET if not defined).",1097328,46,"\n     *",1097374,32,"ac",971290,36,"options.timeout\n     * The number is seconds the loading will timeout in.\n     *\n     * The following are the configurations when loading via Ajax or Direct:",1556685,33,"options.autoAbort=false]\n     * `true` to abort any pending Ajax request prior to loading.",312671,38,"options.params\n     * The params to pass when submitting this form (defaults to this forms {@link #baseParams}).\n     * Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.",312671,38,"[options.waitMsg]\n     * If specified, the value which is passed to the loading {@link #masked mask}. See {@link #masked} for\n     *",316918,33,1094148,33,"\n     * The callback that will be invoked after a successful response. A response is successful if\n     * a response is received from the server and is a JSON object where the `success` property is set\n     * to `true`, `{\"success\": true}`.\n     *\n     *",1390189,48," and can be used for loading via Ajax or Direct:\n     *\n     * @param {Ext.form.Panel} options.success.form\n     * The {@link Ext.form.Panel} that requested the loa",656427,32,"Ext.direct.Event} options.success.result\n     * The result object returned by the server as a result of the load request. If the loading was done via Ext.Direct,\n     * will return the {@link Ext.direct.Event} instance, otherwise will return an Object.",1097328,39,"success.data\n     * The parsed data returned by",1646736,35,"Function} options.failure\n     * The callback that will be invoked after a failed transaction attempt.\n     *\n     *",1390189,48," and can be used for loading via Ajax or Direct:\n     *\n     * @param {Ext.form.Panel} options.failure.form\n     * The {@link Ext.form.Panel} that requested the load.\n     *\n     * @param {Ext.form.Panel} options.failure.result\n     * The failed response or result object returned by the server which performed the operation.",1097328,39,"success.data\n     * The parsed data returned by",1646736,35,"Object} options.scope\n     * The scope in which to call the callback functions (The `this` reference for the callback functions)",1375725,34,"Connection} The request object.",1661413,35,") {",1552987,42,"var me = this,\n            api = me.getApi(),\n            url = me.getUrl() || options.url,\n            waitMsg = options.waitMsg,\n            successFn = function(response, data) {\n                me.setValues(data.data);\n    ",1512078,38,".success)) {\n                    options.success.call(options.scope || me, me, response, data",104368,37,"me.fireEvent('load', me, response);\n            },\n            failureFn = function(response, data) {\n    ",1512078,38,".failure)) {\n                    options.failure.call(scope, me, response, data",104368,37,1431534,38,");\n            },\n            load, method, args;\n        if (options.waitMsg) {\n            if (typeof waitMsg",1578652,33,"waitMsg = {\n           ",1037353,37,"           message: waitMsg",5103,32,"}\n            me.setMasked(waitMsg);\n        }\n        if (api) {\n            load = api.load;\n            if (typeof load",1578652,33,"load = Ext.direct.Manager.parseMethod(load);\n                if (load) {\n                    api.load = load",501472,50,"load) {\n                method = load.directCfg.method;\n                args = method.getArgs(me.getParams(options.params), me.getParamOrder(), me.getParamsAsHash());\n                args.push(function(data, response, success) {\n                    me.setMasked(false)",1499860,68,"Fn(response, data",238304,56,"failureFn(response, data",100032,42,", me);\n                return load.apply(window",991422,32," else if (url) {\n            return Ext.Ajax.request({\n    ",1112844,34,"    timeout: (options.timeout || this.getTimeout()) * 1000,\n                method: options.method || 'GET',\n                autoAbort: options.autoAbort,\n                headers: Ext.apply({\n                    'Content-Type'",1089372,52,"\n                }, options.headers || {}),\n                callback: function(callbackO",1452171,41,1343165,35,".responseText,\n                        statusResult = Ext.Ajax.parseStatus(response.status, response);\n                    me.setMasked(false)",1499860,61,"if (statusResult && responseText.length",1799805,37,"success",1721246,33,226496,37,"response",1343556,37,"                    success = !!response.success",211168,52,1513712,39,"    successFn(response, responseText",669568,64,"failureFn(response, responseText",238592,50,214560,32,"failureFn(response, responseText",100032,55,"});\n        }\n    },\n    //@private\n    getParams: function(params) {\n        return Ext.apply({}, params, this.getBaseParams()",658639,34,"values of form fields in bulk",935760,35,"myForm.s",99563,33,"Ed',\n     *         crazy: true,\n    ",1521281,34,"    *     });\n     *\n     * If there groups of checkbox fields with the same name, pass their values in an array",733967,33,"myForm.s",99563,56,"crazy: false,\n     *         hobbies: [\n     *             'reading',\n     *             'cooking',\n     *             'gaming'",240240,39,"\n     * @param {Object} values field name => value mapping object.\n     * @return {Ext.form.Panel} This form.\n     */\n    setValues",656859,33,1622337,39,"me = this,\n            name, field, value, ln, i, f;\n        values = values || {};\n        for (name in values) {\n            if (values",1804352,41,"field = fields[name];\n                value = values[name];\n",1630634,49,"// If there are multiple fields with the same name. Checkboxes, radio fields and maybe event just normal fields..\n",93000,36,"field)",842367,33,"field",843150,33,"// Loop through each of the fields\n        ",52240,63,"        f = field[i",92176,35,"f.isRadio",91904,36,"// If it is a radio field just use setGroupValue which will handle all of the radio fields",86032,33,"f.setGroupValue",98478,37,191392,35,"    } else if (f.isCheckbox",91904,36,63984,42,"                    f.setChecked((value.indexOf(f._value) != -1))",92287,34,403424,41,"    f.setChecked((value == f._value))",92287,34,"}\n        ",214539,53,"        // If it is a bunch of fields with the same name, check if the value is also an array, so we can map it",86032,33,"// to each field",92928,37,1106096,42,"                f.setValue(value[i])",92287,34,"}",98576,78,214560,36,"field.isRadio || field.isCheckbox",344928,35,"If the field is a radio or a checkbox\n                            field.setChecked",98478,33,226496,37,"// If just a normal field\n                            field.setValue",98478,33,"}",18384,39,"    if (me.getTrackResetOnLoad())",1569073,32,".resetOriginalValue(",100032,55,543968,55,1560602,33,"value of each field in the form, keyed to the field's name.\n     * For groups of checkbox fields with the same name, it will be arrays of values",733967,33,"{\n     *         name: \"Jacky Nguyen\", // From a TextField\n     *         favorites: [\n     *             'pizza',\n     *             'noodle',\n     *             'cake'",1561744,46,"param {Boolean} [enabled] `true` to return only enabled fields.\n     * @param {Boolean} [all] `true` to return all fields even if they don't have a\n     * {@link Ext.field.Field#name name} configured.\n     * @return {Object} Object mapping field name to its value",564195,34,"enabled, all",1481416,33,"Fields(),\n            values = {}",840288,35,",\n            field, value, addValue, bucket, name, ln, i;\n        // Function which you give a field and a name, and it will add it into the values\n        // object accordingly\n        addValue = function(field, name) {\n            if (!all && (!name || name === 'null') || field.isFile) {",335918,51,"if (field.isCheckbox",1541289,34,"getSubmitValu",787856,42,"value = field.getValue",504800,34,"!(enabled && field.getDisabled())) {\n                // RadioField is a special case where the value returned is the fields valUE\n                // ONLY if it is checked\n                if (field.isRadio) {\n                    if (field.isChecked(",335278,34,"s",1353679,32,73264,51,"// Check if the value already exists\n                    bucket = value",136735,33,"!Ext.isEmpty(bucket)) {\n                        // if it does and it isn't an array, we need to make it into an array\n                        // so we can push more",1804913,32,"Array(bucke",410271,34,"bucket = values",91369,43,"bucket\n    ",1180407,47,"    }\n                        // Check if it is an array\n                        if (",335389,46,"// Concat it into the other values\n                            bucket = values[name] = bucket.concat",98478,33,226496,37,"// If it isn't an array, just pushed more values\n                            bucket",93103,38,806377,55,"values",1353679,32,283312,46,"};\n        // Loop through each of the fields, and add the values for those fields.\n        for (name in fields) {\n            if (fields",1804352,41,"field = fields[name];\n                if (isArray(field)) {\n                    ln = field",282653,34,1302960,34,"            addValue(field[i], ",138144,46," else {\n                    addValue(field, n",1539680,36,"}\n        }\n        return values;\n    },\n    /**\n     * Resets all fields in the form back",1556517,33," @return {Ext.form.Panel} This form.\n     */",701398,38,"getFieldsAsArray().forE",1568079,34,"field.reset",1253676,35,";\n    },\n    /**\n     * A convenient method to disable all fields in this form.\n     * @return {Ext.form.Panel} This form.\n     */\n    doSetDisabled: function(newDisabled) {\n        this.getFieldsAsArray().forE",1568079,34,"field.setDisabled(newDisabled",1253677,34,876096,45,"getFieldsAsArray: function() {\n        var fields = [],\n            getFieldsFrom = ",1258687,33,"if (item.isField",1583725,36,61728,37,"    if (item.isContainer) {\n                    item.getItems().each(getFieldsFrom",341552,34,";\n        this.getItems().each(getFieldsFrom);\n        return field",1234256,41,"Returns all {@link Ext.field.Field field} instances inside this form.\n     * @param {Boolean} byName return only fields that match the given name, otherwise return all fields.\n     * @return {Object/Array} All field instances, mapped by field name; or an array if `byName` is passed.\n     */\n    getFields: function(byName) {\n        var fields = {},\n            itemName;\n        var getFieldsFrom = ",1258687,33,"if (item.isField) {\n                    itemName = item",1354076,32,"if ((byName && itemName == byName) || typeof byNam",1541165,40,"    if (fields.hasOwnProperty(item",211727,33,"    if (!Ext.isArray(fields[itemName]",4944,33,"    fields[itemN",91371,45,"fields[itemName]",86032,33,"]",98575,56,"    fields[itemName]",67616,33,85616,41,"fields[itemName] = item",278240,49,88592,35,"if (item.isContainer) {\n                    item.items.each(getFieldsFrom",341552,34,";\n        this.getItems().each(getFieldsFrom);\n        return (byName) ? (fields[byName] || []) : field",1051552,33,"an array of fields in this formpanel.\n     * @return {Ext.field.Field[]} An array of fields in this form panel.",978367,32,"FieldsArray: function() {\n        var fields = [];\n        var getFieldsFrom = ",1258687,33,"if (item.isField",1583725,36,61728,37,"    if (item.isContainer) {\n                    item.items.each(getFieldsFrom",341552,34,";\n        this.items.each(getFieldsFrom);\n        return fields;\n    },\n    getFieldsFromItem: Ext.emptyFn,\n    /**\n     * Shows a generic/custom mask over a designated Element",1544461,32,"cfg Either a string message or a configuration object supporting\n     * the following option",1561485,38,"message : 'Please Wait',\n     *         cls : 'form-mask'",90218,36,"Object} target\n     * @return {Ext.form.Panel} This form",77360,44,"#setMasked} instead.\n     */\n    showMask: function(cfg, target) {\n        Ext.Logger.warn('showMask is now deprecated. Please use Ext.form.Panel#setMasked instead');\n        cfg = Ext.isObject(cfg) ? cfg.message : cfg;\n        if (cfg) {\n            this.setMasked({\n       ",1037353,37,"       message: cfg",1839871,51,"setMasked(true",1540128,56,"Hides a previously shown wait mask (See {@link #showMask}).\n     * @return {Ext.form.Panel} this",77360,44,"#unmask} or {@link #setMasked} instead.\n     */\n    hideM",1040114,53,543984,39,"Returns the currently focused field\n     * @return {Ext.field.Field} The currently focused field, if one is focused or `null`.",978367,32,"FocusedField: function(",1481416,33,"FieldsArray",1320855,53,486928,52,1574363,35,"field.isFocused) {\n                return fiel",1720784,35,1276560,35,"@return {Boolean/Ext.field.Field} The next field if one exists, or `false`.",978367,32,"NextField: function(",1481416,33,"FieldsArray(),\n            focusedField = this.getFocusedField",1048327,35,"focusedField) {\n            index = fields.indexOf(focusedField);\n            if (index !== fields.length - 1) {\n                index++;\n                return fields[index",910543,42,"false;\n    },\n    /**\n     * Tries to focus the next field in the form, if there is currently a focused field.\n     * @return {Boolean/Ext.field.Field} The next field that was focused, or `false`.\n     * @private\n     */\n    focusNextField: function() {\n        var field = this.getNextField();\n",1481792,33,"field.focus();\n            return field",511040,45,"/**",1550736,40,"/Ext.field.Field} The next field if one exists, or `false`.\n     */\n    getPreviousField: function(",1481416,33,"FieldsArray(),\n            focusedField = this.getFocusedField",1048327,35,"focusedField) {\n            index = fields.indexOf(focusedField);\n            if (index !== 0) {\n                index--;\n                return fields[index",910543,42,"false;\n    },\n    /**\n     * Tries to focus the previous field in the form, if there is currently a focused field.\n     * @return {Boolean/Ext.field.Field} The previous field that was focused, or `false`.\n     * @private\n     */\n    focusPreviousField: function() {\n        var field = this.getPreviousField();\n",1481792,33,"field.focus();\n            return field",511040,39,1240047,57,"fx.runner.Css",702448,34,1786785,84302,"/controller/HomeController",1871087,489,"Ext.define('MEC_App.controller.HomeController",1212304,50,"}\n});\n\n/*\n * File: app/view/PublicServiceView",1871087,489,"Ext.define('MEC_App.view.PublicServic",1870989,52,"PublicServic",1871044,43,"/view/MediaCenterView",1871087,489,"Ext.define('MEC_App.view.MediaCenter",1870990,51,"MediaCenter",1871045,42,"/view/InquiriesView",1871087,489,"Ext.define('MEC_App.view.Inquiries",1870990,51,"Inquiries",1871045,42,"/view/ContactUsView",1871087,489,"Ext.define('MEC_App.view.ContactUs",1870990,51,"ContactUs",1871045,42,"/view/ProjectsView",1871087,489,"Ext.define('MEC_App.view.Projects",1870990,51,"Projects",1871045,42,"/view/ReportsView",1871087,489,"Ext.define('MEC_App.view.Reports",1870990,51,"Reports",1871045,42,"/view/SettingsView",1871087,489,"Ext.define('MEC_App.view.Settings",1870990,51,"Settings",1871045,42,"/view/LogivFormView",1871087,489,"Ext.define('MEC_App.view.LogivFormView', {\n    extend: Ext.form.Panel,\n    alias: 'widget.LogivForm",1871045,42,"/view/MyBusinessView",1871087,489,"Ext.define('MEC_App.view.MyBusiness",1870990,51,"MyBusiness",1871045,42,"/view/PrintOffsView",1871087,489,"Ext.define('MEC_App.view.PrintOffs",1870990,51,"PrintOffs",1871045,42,"/view/MyRequestsView",1871087,489,"Ext.define('MEC_App.view.MyRequests",1870990,51,"MYRequests",1871045,42,"/view/ComplaintsView",1871087,489,"Ext.define('MEC_App.view.ComplaintsView', {\n    extend: Ext.form.Panel,\n    alias: 'widget.Complaints",1871045,42,"/view/SupplyServiceView",1871087,489,"Ext.define('MEC_App.view.SupplyServic",1870989,52,"SupplyServic",1871044,43,"/view/MinistryPublicationView",1871087,489,"Ext.define('MEC_App.view.MinistryPublication",1870990,51,"MinistryPublication",1871045,42,"/view/MinistryInThePressView",1871087,489,"Ext.define('MEC_App.view.MinistryInThePress",1870990,51,"MinistryInThePress",1871045,42,"/view/EconomyNewsView",1871087,489,"Ext.define('MEC_App.view.EconomyNews",1870990,51,"EconomyNews",1871045,42,"/view/TradeNameAvailabilityView",1871087,489,"Ext.define('MEC_App.view.TradeNameAvailability",1870990,51,"TradeNameAvailability",1871045,42,"/view/RecallsView",1871087,489,"Ext.define('MEC_App.view.Recalls",1870990,51,"Recalls",1871045,42,"/view/ConsumerEducationView",1871087,489,"Ext.define('MEC_App.view.ConsumerEducation",1870990,51,"ConsumerEducation",1871045,42,"/view/InvestorEducationView",1871087,489,"Ext.define('MEC_App.view.InvestorEducation",1870990,51,"InvestorEducation",1871045,42,"/view/ViolationsView",1871087,489,"Ext.define('MEC_App.view.Violations",1870990,51,"Violations",1871045,42,"/view/AboutMinistryView",1871087,489,"Ext.define('MEC_App.view.AboutMinistry",1870990,36,"config: {}\n});\n\n/*\n * File: app/view/MinistryBranchesView",1871087,489,"Ext.define('MEC_App.view.MinistryBranches",1870990,51,"MinistryBranches",1871045,42,"/view/FeedbackFormView",1871087,489,"Ext.define('MEC_App.view.FeedbackFormView', {\n    extend: Ext.form.Panel,\n    alias: 'widget.FeedbackForm",1871045,42,"/view/MinistryEmployeesView",1871087,489,"Ext.define('MEC_App.view.MinistryEmployees",1870990,51,"MinistryEmployees",1871045,42,"/view/MicroEconomicReport",1871087,489,"Ext.define('MEC_App.view.MicroEconomicReport",1870994,47,"MicroEconomicReport",1871049,38,"/view/BusinessIndicatorsReport",1871087,489,"Ext.define('MEC_App.view.BusinessIndicatorsReport",1870994,47,"BusinessIndicatorsReport",1871049,38,"/view/ConsumerIndicatorsView",1871087,489,"Ext.define('MEC_App.view.ConsumerIndicators",1870990,51,"ConsumerIndicators",1871045,42,"/view/PricingView",1871087,489,"Ext.define('MEC_App.view.Pricing",1870990,51,"Pricing",1871045,42,"/view/WhereToShopView",1871087,489,"Ext.define('MEC_App.view.WhereToShop",1870990,51,"WhereToShop",1871045,42,"/view/MonthlyFruitView",1871087,489,"Ext.define('MEC_App.view.MonthlyFruit",1870990,51,"MonthlyFruit",1871045,42,"/view/TrademarkReportView",1871087,489,"Ext.define('MEC_App.view.TrademarkReport",1870990,51,"TrademarkReport",1871045,636,",\n        'PublicServiceView',\n        'MediaCenterView',\n        'InquiriesView',\n        'ContactUsView',\n        'ProjectsView',\n        'ReportsView',\n        'SettingsView',\n        'LogivFormView',\n        'MyBusinessView',\n        'PrintOffsView',\n        'MyRequestsView',\n        'ComplaintsView',\n        'SupplyServiceView',\n        'MinistryPublicationView',\n        'MinistryInThePressView',\n        'EconomyNewsView',\n        'TradeNameAvailabilityView',\n        'RecallsView',\n        'ConsumerEducationView',\n        'InvestorEducationView',\n        'ViolationsView',\n        'AboutMinistryView',\n        'MinistryBranchesView',\n        'FeedbackFormView',\n        'MinistryEmployeesView',\n        'MicroEconomicReport',\n        'BusinessIndicatorsReport',\n        'ConsumerIndicatorsView',\n        'PricingView',\n        'WhereToShopView',\n        'MonthlyFruitView',\n        'TrademarkReportView'\n    ],\n    controllers: [\n        'HomeController",1871680,207]
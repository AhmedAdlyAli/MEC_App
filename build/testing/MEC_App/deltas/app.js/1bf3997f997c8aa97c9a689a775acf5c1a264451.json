["function _db890518c4e34c82c3c58fe53d42aa88af300ac5(){};",79088,36,91,1048485,1048576,37117,"A simple class to display a button in Sencha Touch.\n *\n * There are various different styles of Button you can create by using the {@link #icon},\n * {@link #iconCls}, {@link #iconAlign}, {@link #ui}, and {@link #text}\n * configurations.\n *\n * ## Simple Button\n *\n * Here is a Button in it's simplest form",729280,38,1078674,51,"text: 'Button'\n *     });\n *     Ext.Viewport.add({ xtype: 'container', padding: 10, items: [button] });\n *\n * ## Icons\n *\n * You can also create a Button with just an icon using the {@link #iconCls} configuration",729280,38,1078674,51,"iconCls: 'refresh'\n *     });\n *     Ext.Viewport.add({ xtype: 'container', padding: 10, items: [button] });\n *\n * Sencha provides the \"Font\" and \"PNG\" icons packs from http://wwww.pictos.cc. \n * Use icons with the {@link Global_CSS#icon icon} mixin in your Sass.\n *\n * ## Badges\n *\n * Buttons can also have a badge on them, by using the {@link #badgeText} configur",585052,37,887392,66,"padding: 10,",1026883,36,"xtype: 'button',\n *             text: 'My Button',\n *             badgeText: '2",1480320,32,"## UI\n *\n * Buttons also come with a range of different default UIs. Here are the included UIs\n * available (if {@link #$include-button-uis $include-button-uis} is set to `true`):\n *\n * - **normal** - a basic gray button\n * - **back** - a back button\n * - **forward** - a forward button\n * - **round** - a round button\n * - **action** - shaded using the {@link Global_CSS#$active-color $active-color} (dark blue by default)\n * - **decline** - shaded using the {@link Global_CSS#$alert-color $alert-color} (red by default)\n * - **confirm** - shaded using the {@link Global_CSS#$confirm-color $confirm-color} (green by default)\n *\n * You can also append `-round` to each of the last three UI's to give it a round shape:\n *\n * - **action-round**\n * - **decline-round**\n * - **confirm-round**\n *\n * And setting them is very simple:\n *\n *     var uiB",1078679,46,"text: 'My Button',\n *         ui: 'action'\n *     });\n *\n * And how they look:",1835946,45,886528,70,"padding: 4",1026819,40,"xtype: 'button',\n *             margin: 5\n *         },\n *",258880,34,"type: 'vbox',\n *             align: 'center'",1849302,51," ui: 'normal', text: 'normal' },\n *             { ui: 'round', text: 'round' },\n *             { ui: 'action', text: 'action' },\n *             { ui: 'decline', text: 'decline' },\n *             { ui: 'confirm', text: 'confirm'",889215,33,"Note that the default {@link #ui} is **normal**.\n *\n * You can also use the {@link #sencha-button-ui sencha-button-ui} CSS Mixin to create your own UIs.\n *\n * ## Example\n *\n * This example shows a bunch of icons on the screen in two toolbars. When you click on the center\n * button, it switches the {@link #iconCls} on every button on the page.",1735457,39,"createWidget('c",887405,61,"{\n *             type: 'vbox',\n *             pack:'center',\n *             align: 'center'",1849302,79,"button',\n *                 text: 'Change iconCls',\n *",1836694,62,"// classes for all the icons to loop through.\n *                     var availableIconCls = [\n *                         'action', 'add', 'arrow_down', 'arrow_left',\n *                         'arrow_right', 'arrow_up', 'compose', 'delete',\n *                         'organize', 'refresh', 'reply', 'search',\n *                         'settings', 'star', 'trash', 'maps', 'locate',\n *                         'home'\n *                     ];\n *                     // get the text of this button,\n *                     // so we know which button we don't want to change\n *                     var text = this.getText();\n *\n *                     // use ComponentQuery to find all buttons on the page\n *                     // and loop through all of them\n *                     Ext.Array.forEach(Ext.ComponentQuery.query('button'), function(button) {\n *                         // if the button is the change iconCls button, continue\n *                         if (button.getText() === text)",1353872,34,"return",1837135,33,"\n *                         // get the index of the new available iconCls\n *                         var index = availableIconCls.indexOf(button.getIconCls()) + 1",1836877,32,"// update the iconCls of the button with the next iconCls, if one exists.\n *                         // if not, use the first one\n *                         button.setIconCls(availableIconCls[(index === availableIconCls.length) ? 0 : index]);\n *    ",1496638,36,"    }",1494736,34,"{",1735607,57,1735593,34,1836560,77," iconCls: 'action' },\n *                     { iconCls: 'add' },\n *                     { iconCls: 'arrow_down' },\n *                     { iconCls: 'arrow_left' },\n *                     { iconCls: 'arrow_up' },\n *                     { iconCls: 'compose' },\n *                     { iconCls: 'delete' },\n *                     { iconCls: 'organize' },\n *                     { iconCls: 'refresh'",1837188,84,1836448,112,"ui: 'light',\n *        ",729408,33,1836584,53," iconCls: 'reply' },\n *                     { iconCls: 'search' },\n *                     { iconCls: 'settings' },\n *                     { iconCls: 'star' },\n *                     { iconCls: 'trash' },\n *                     { iconCls: 'maps' },\n *                     { iconCls: 'locate' },\n *                     { iconCls: 'home'",1837188,114,"/\nExt.define('Ext.Button",1000495,36,"xtype: 'button'",1023847,35,"@preventable doTap\n     * Fires whenever a butt",1158719,33,"Button} this",1028972,49,1159836,61,"event release\n     * @preventable doRelease\n     * Fires whenever the button is released.\n     * @param {Ext.Button} this",1028972,49,1159836,49,1187647,53,"pressed",1155404,33,"dd to the Button when it is press",1334560,45,"pressedCls: Ext.baseCSSPrefix + 'button-pressing'",1194464,39,"bad",1155402,35,"dd to the Button's badge, if it has one.  Badges appear as small numbers, letters, or icons that sit on top of your button.  For instance, a small red number indicating how many updates are availabl",1838992,44,"badgeCls: Ext.baseCSSPrefix + 'badge'",1194464,39,"hasBad",1155402,35,"dd to the Button if it has a badge (note that this goes on the\n         * Button element itself, not on the badge element).",746656,62,"hasBadgeCls: Ext.baseCSSPrefix + 'hasbadge'",1194464,39,"label",1155404,33,"dd to the field's l",1187743,65,"Ext.baseCSSPrefix + 'button-label'",1194464,39,"iconCls\n         *",1187708,34,"icon element. This is useful if you want to use a CSS\n         * background image to create your Button ic",835680,45,"iconCls: null",1228656,59,"badgeText\n         * Optional badge text.  Badges appear as small numbers, letters, or icons that sit on top of your button.  For instance, a small red number indicating how many updates are availabl",1838992,44,"badgeTex",930688,38,"String} text\n         * The Button tex",1853312,44,"tex",930688,38,"String} icon\n         * Url to the icon image to use if you want an icon to appear on your butt",835680,45,"ic",1854271,40,"String} iconAlign\n         * The position within the Button to render the icon Options are: `top`, `right`, `bottom`, `left` and `center` (when you have\n         * no {@link #text} set",1162384,44,"iconAlig",849193,40,"Number/Boolean} pressedDelay\n         * The amount of delay between the `tapstart` and the moment we add the `pressedCls` (in milliseconds).\n         * Settings this to `true` defaults to 100ms.\n         */\n        pressedDelay: 0",1627088,41,"handler\n         * The handler function to run when the Button",1038013,57,"andl",1162223,39,"Object} scope\n         * The scope to fire the configured {@link #handler}",856831,46,"sco",1186560,47,"autoEvent\n         * Optional event name that will be fired instead of `tap` when the Button",1038013,56,"autoEven",930688,38,"String} ui\n         * The ui style to render this button with. The valid default option",8523,32,"'normal'` - a basic gray button (default).\n         * - `'back'` - a back button.\n         * - `'forward'` - a forward button.\n         * - `'round'` - a round button.\n         * - `'plain'`\n         * - `'action'` - shaded using the {@link Global_CSS#$active-color $active-color} (dark blue by default).\n         * - `'decline'` - shaded using the {@link Global_CSS#$alert-color $alert-color} (red by default).\n         * - `'confirm'` - shaded using the {@link Global_CSS#$confirm-color $confirm-color} (green by default)",739464,37,"append `-round` to each of the last three UI's to give it a round shape:\n         *\n         * - **action-round**\n         * - **decline-round**\n         * - **confirm-round**",1033039,53,"ui: 'norm",834992,42,"html The HTML to put in this button",1160758,39,"just add text, please use the {@link #text}",844931,36,1839311,63,"baseCls: Ext.baseCSSPrefix + 'button'\n    },\n    template: [\n        {\n",1156528,37,"reference: 'badgeElement',\n",1080849,33,"},\n        {\n",1156528,37,"className: Ext.baseCSSPrefix + 'button-icon',\n            reference: 'iconElement'\n        },\n        {\n",1156528,37,"reference: 'textElement',\n",1080849,33,"}\n    ]",549727,44,"callParent();\n        this.element.on({",1776155,38,"tap: 'onTap",716278,71,646768,35,"@private\n     */\n    updateBadgeText: function(badgeTex",816398,53,"badgeElement = this.badgeElement;\n        if (badgeText) {\n            badgeElement.show();\n            badgeElement.setText(badgeText",201616,32,"badgeElement.hide();\n        }\n        element[(badgeText)",1024940,35,"HasBadgeCls()",974304,46,"update",675383,35,"textElement = this.textElement;\n        if (textElement) {\n            if (text) {\n                text",791470,33,"extElement.setHtml(tex",1121072,41,"textElement.hide(",1064848,34,"refreshIconAlign(",1196544,56,787156,37,"var textElement = this.textElement;\n        if (html) {\n            textElement.show();\n            textElement.setHtml(html",963568,33,"extElement.hide(",1196544,56,"updateBadgeCls: function(badgeCls, oldBadgeCls) {\n        this.badgeElement.replaceCls(oldBadgeCls, badgeCl",1945536,41,"/\n    updateHasBadgeCls: function(hasBadgeCls, oldHasBadgeCl",816112,53,"element.hasCls(oldHasBadgeCls)) {\n            element.replaceCls(oldHasBadgeCls, hasBadgeCls",1196544,56,"updateLabelCls: function(l",1190055,32,"this.textElement.replaceCls(oldLabelCls, labelCl",1945536,41,"/\n    updatePressedCls: function(pressedCls, oldPressedCl",816112,53,"element.hasCls(oldPressedCls)) {\n            element.replaceCls(oldPressedCls, pressedCls",1196544,56,"updateIcon: function(ic",678159,41,"element = me.iconElement;\n        if (icon) {\n            me.showIconElement();\n            element.setStyle('background-image', 'url(' + icon + ')');\n            me.refreshIconAlign",1342848,33,"element.setStyle('background-image', '');\n            me.hideIconElemen",1597664,37,"@private\n     */\n    updateIconCls: function(iconCls, oldIconCl",542383,41,"lement = me.iconElement;\n        if (iconCls) {\n            me.showIconElement();\n            element.replaceCls(oldIconCls, iconCls);\n            me.refreshIconAlign",1342848,33,"element.removeCls(oldIconCls);\n            me.hideIconElemen",1597664,37,"@private\n     */\n    updateIconAlign: function(alignment, oldAlign",816395,56,"baseCls = Ext.baseCSSPrefix + 'iconalign-';\n        if (!this.getText()) {\n            alignment = \"center\";\n        }\n",765025,36,"\"center\");\n",765025,36,"oldAlignment);\n        if (this.getIcon() || this.getIconCls()) {\n            element.addCls(baseCls + alignment);\n        }\n    },\n    refreshIconAlign",1939392,34,"IconAlign(this.getIconAlign());\n    },\n    applyAutoEvent: function(autoEvent",1610608,35,"if (typeof autoEvent == 'string') {\n            autoEvent = {\n                name: autoEvent,\n                scope: me.scope || m",1595792,35,"return autoEve",1348159,41,"/\n    updateAutoEvent: function(autoEvent) {\n        var name = autoEvent.name,\n            scope = autoEvent.scope;\n        this.setHandler(function() {\n            scope.fireEvent(name, scope, this);\n        });\n        this.setScope(scope);\n    },\n    /**\n     * Used by `icon` and `iconCls` configurations to hide the icon element.\n     * @private\n     */\n    hideIcon",708350,35,"iconElement",471945,32,"shown');\n        this.iconElement.addCls(Ext.baseCSSPrefix + 'hidden');\n    },\n    /**\n     * Used by `icon` and `iconCls` configurations to show the icon element",342608,34,"Icon",708350,35,"iconElement",471945,32,"hidden');\n        this.iconElement.addCls(Ext.baseCSSPrefix + 'shown');\n    },\n    /**\n     * We override this to check for '{ui}-back'. This is because if you have a UI of back, you need to actually add two class names.\n     * The ui class, and the back class:\n     *\n     * `ui: 'action-back'` would turn into:\n     *\n     * `class=\"x-button-action x-button-back\"`\n     *\n     * But `ui: 'action'` would turn into:\n     *\n     * `class=\"x-button-action\"`\n     *\n     * So we just split it up into an array and add both of them as a UI, when it has `back`.",1278416,34,"Ui",1010447,33,"config && ",1451290,36,"var array = config.split('-');\n            if (array && (array[1] == \"back\" || array[1] == \"forward\")",59835,32,1221904,42,"onfig;\n    },\n    getUi: function() {\n        //Now that the UI can sometimes be an array, we need to check if it an array and return the proper value.\n        var ui = this._ui;\n        if (Ext.isArray(ui)) {\n            return ui.join('-');\n        }\n        return ui;\n    },\n    applyPressedDelay: function(delay) {\n        if (Ext.isNumber(delay)) {\n            return delay;\n        }\n        return (delay) ? 100 : 0;\n    },\n    // @private\n    onPress",900368,50,"element = me.element,\n            pressedDelay = me.getPressedDelay(),\n            pressedCls = me.getPressedCls();\n        if (!",1842224,32,"if (pressedDelay > 0) {\n                me.pressedTimeout =",345357,45,"delete me.pressedTimeout;\n        ",487003,43,"        element.addCls(pressedCl",1554144,43,", pressedDelay",48192,40,"element.addCls(pressedCl",346496,33,",\n    // @private",720287,55,"release",720575,36,"\n        ], 'doRelease",1177630,33,"Release",1178059,32,"!",1842224,32,"if (me.hasOwnProperty('pressedTimeout')",118888,33,"me.pressedTimeout);\n                delete me.pressedTimeout",346432,39,"me.element.removeCls(me.getPressedCls()",1153184,54,"onTap",1827919,33,1178094,61,"this.fireAction('",1177568,54,"Tap'",974304,46,"doTap: function(me, e) {\n        var handler = me.getHandler(),\n            scope = me.getScope() || me;\n        if (!handler",1771375,47,"ypeof handler == 'string') {\n            handler = scope[handler];\n        }\n        //this is done so if you hide the button in the handler, the tap event will not fire on the new element\n        //where the button was.\n        if (e && e.preventDefault",1936269,50,"    handler.apply(scope, ",983583,38,1085686,68620,"label component which allows you to insert content using {@link #html} configuration.",1154720,67,"xtype: 'label',\n *         html: 'My label!'",929663,32,"Label",1000495,36,"xtype: 'label'",1000525,33,"Ext.baseCSSPrefix + 'label'\n    }\n});\n/**\n         * @cfg {String} html\n         * The label of this component.\n         */",1154288,4270,"{@link Ext.Title} is used for the {@link Ext.Toolbar#title} configuration in the {@link Ext.Toolbar} component",663552,34,"Title",1000495,36,"xtype: 'title'",853552,43,1161135,53,"'x-title'",1498432,40,"itle The title text\n         */\n        title: ''",1189998,34,"Title: function(newTitle) {\n        this.setHtml(newTitle);\n    }\n});\n\n/**\nThe {@link Ext.Spacer} component is generally used to put space between items in {@link Ext.Toolbar} components.\n\n## Examples\n\nBy default the {@link #flex} configuration is set to 1:\n\n",1078632,32,889679,34,"       fullscreen: true,\n        items:",1006656,33,"xtype : 'toolbar',\n",1735577,32,"               items: [",995466,55,"button',\n                        text : 'Button One'",789050,44,993845,34,"spacer'",789050,44,"{\n        ",536815,38,"                   text : 'Button Two'",18384,39,"]\n            }\n        ]\n    });\n\nA",1851016,33," {@link #width} configuration which will get the {@link Ext.Spacer} a fixed width:\n\n    @example preview\n",889678,35,"       fullscreen: true,\n        layout: {\n            type: 'vbox',\n            pack: 'center',\n            align: 'stretch'\n        },\n        items:",1006656,33,"xtype : 'toolbar',\n",1735577,32,"               items: [",995466,55,"button',\n                        text : 'Button One'",789050,44,993845,34,"spacer'",994402,35,789050,44,"{\n        ",536815,38,"                   text : 'Button Two'",18384,39,"]",1135584,46,"xtype: 'container',\n                items: [",995466,55,"button',\n                        text : 'Change Ext.Spacer width',\n",1836687,47,"                           //get the spacer using ComponentQuery",146194,33,"spacer = Ext.ComponentQuery.query('spacer')[0]",649344,34,"from =",649517,37,"to = 250;\n\n                            //set the width to a random number\n                            spacer.setWidth(Math.floor(Math.random() * (to - from + 1) + from)",238592,67,"]\n            }\n        ]\n    });\n\nYou can also insert multiple {@link Ext.Spacer}'s:\n\n    @example preview\n",889678,35,"       fullscreen: true,\n        items:",1006656,33,"xtype : 'toolbar',\n",1735577,32,"               items: [",995466,55,"button',\n                        text : 'Button One'",789050,44,993845,34,"spacer'",789050,44,"{\n        ",536815,38,"                   text : 'Button Two'",789050,44,993845,34,"spacer'",994402,33,"20",789050,44,"{\n        ",536815,38,"                   text : 'Button Three'",18384,39,"]\n            }\n        ]\n    });\n */\nExt.define('Ext.Space",1150542,37,"alias: 'widget.spacer',\n    config: {},\n",1162448,33,"flex\n         * The flex value of this spacer. This defaults to 1, if no width has been ",1164415,42,"/**\n         * @cfg {Number",741448,37,"spacer. If this is set, the value of {@link #flex} will be igno",1334559,42,"// @private",891056,45,1468766,35,"!config.width) {\n            config.flex = 1",708000,36,1929455,37,"}\n});\n\n/**\n * @aside video tabs-toolbars\n *\n * {@link Ext.Toolbar}s are most commonly used as docked items as within a {@link Ext.Container}. They can be docked either `top` or `bottom` using the {@link #docked} configuration.\n *\n * They allow you to insert items (normally {@link Ext.Button buttons}) and also add a {@link #title}.\n *\n * The {@link #defaultType} of {@link Ext.Toolbar} is {@link Ext.Button}.\n *\n * You can alternatively use {@link Ext.TitleBar} if you want the title to automatically adjust the size of its items.\n *\n * ## Examples",1835946,45,886528,78,"{\n *             type: 'vbox',\n *             pack: 'center'",1849302,76," ",1735632,32,1735593,34,"title: 'My Toolbar",1849600,64,"container',\n *        ",1026823,36,"        xtype: 'button',\n *                     margin: '10 10 0 10",1203365,43,1836560,33,1836637,35,"Toggle docked",1836681,87,"toolbar = Ext.ComponentQuery.query('toolbar')[0]",1353824,37,"newDocked = (toolbar.getDocked() === 'top') ? 'bottom' : 'top'",1836877,36,"toolbar.setDocked(newDocked",1837134,82,1836637,35,"Toggle UI",1836681,87,"toolbar = Ext.ComponentQuery.query('toolbar')[0]",1353824,37,"newUi = (toolbar.getUi() === 'light') ? 'dark' : 'light'",1836877,36,"toolbar.setUi(newUi",1837134,82,1836637,35,"Change tit",1205948,32,1836711,57,"toolbar = Ext.ComponentQuery.query('toolbar')[0]",1353824,37,"titles = ['My Toolbar', 'Ext.Toolbar', 'Configurations are awesome!', 'Beautiful.']",649344,34,"   //internally, the title configuration gets converted into a {@link Ext.Title}",802640,32,"               //so you must get the title configuration of that component",1354192,36,"title = toolbar.getTitle().getTitle()",1353824,37,"newTitle = titles[titles.indexOf(title) + 1] || titles[0]",1836877,36,"toolbar.setTitle(newTitle",1837134,56,1635118,38,"\n *         ]\n *     });\n *\n * ## Notes\n *\n",744198,131,"*\n *     <!doctype html>\n *\n",744389,60,"*\n *     <!doctype html>\n *     <html>\n *         <head>\n",744546,52,"*             ...\n *\n */\nExt.define('Ext.Toolbar",1079275,36,"xtype: 'toolbar',\n    // @private\n    isToolbar",1422000,50,"baseCls",1161135,74,"toolbar'",1194464,40,"i\n         * The ui for this {@link Ext.Toolbar}. Either 'light' or 'dark'. You can create more UIs by using using the CSS Mixin {@link #sencha-toolbar-ui}",1160592,43,1000695,40,"String/Ext.Title} title\n         * The title of the toolbar",836480,43,"titl",1463135,46,1035893,35,"xtype to cre",1838990,46,"defaultType: 'button'",1194464,39,"docked\n         * The docked position for this {@link Ext.Toolbar}.\n         * If you specify `left` or `right`, the {@link #layout} configuration will automatically change to a `vbox`. It's also\n         * recommended to adjust the {@link #width} of the toolbar if you do thi",1161728,44,"/**\n         * @cfg {",742724,48,"height of the Toolbar",1037776,44,"inHeigh",930688,38,1032251,734,1928145,54,520411,34,"f you set the {@link #docked} configuration to `left` or `right`, the default layout will change from the\n         * `hbox` to a `vbox`",752400,54,"layout: {\n",1927581,35,"   align: 'center'\n        }\n    },\n    hasCSSMinHeight",1038111,52,1468766,42,"docked == \"left\" || config.docked == \"right\") {\n            config.layout = {\n                type: 'vbox',\n                align: 'stretch",544576,35,1520681,60,"// @private\n    applyTitle: function(title) {\n        if (typeof title == 'string') {\n            title = {\n                title: title,\n                centered: Ext.theme.is.Tizen ? false : tru",1595792,35,"return Ext.factory(title, Ext.Title, this.getTitle()",1840672,36,"Title: function(newTitle, oldTitle) {\n        if (newTitle) {\n            this.add(newTitle);\n        }\n        if (oldTitle) {\n            oldTitle",434912,33,"/**\n     * Shows the title, if it exists.\n     */\n    showTitle: function() {\n        var title = this.getTitle();\n        if (title) {\n            title.show",1578815,36,"Hides the title, if it exists.\n     */\n    hideTitle: function() {\n        var title = this.getTitle();\n        if (title) {\n            title.hide();\n        }\n    }\n}, /**\n     * Returns an {@link Ext.Title} component.\n     * @member Ext.Toolbar\n     * @method getTitle\n     * @return {Ext.Title}\n     */\n/**\n     * Use this to update the {@link #title} configuration.\n     * @member Ext.Toolbar\n     * @method setTitle\n     * @param {String/Ext.Title} title You can either pass a String, or a config/instance of {@link Ext.Title}.\n     */\n",1280416,53,1158587,34679,"{@link Ext.TitleBar}'s are most commonly used as a docked item within an",1022768,32,"e main difference between a {@link Ext.TitleBar} and an {@link Ext.Toolbar} is that\n * the {@link #title} configuration is **always** centered horizontally in a {@link Ext.TitleBar} between\n * any items aligned left or right.\n *\n * You can also give items of a {@link Ext.TitleBar} an `align` configuration of `left` or `right`\n * which will dock them to the `left` or `right` of the bar.\n *\n * ## Examples",1735457,65,"xtype: 'titlebar',\n *",1735584,35,259064,32,1849328,45,"iconCls: 'add',\n *                 align: 'left",1735696,57,"conCls: 'home',\n *                 align: 'right'",889200,48,"    Ext.Viewport.setStyleHtmlContent(true);\n *     Ext.Viewport.setHtml('This shows the title being centered and buttons using align <i>left</i> and <i>right</i>.');\n *\n * <br />",1735457,65,"xtype: 'titlebar',\n *",1735584,35,259064,32,1849328,45,"align: 'left',\n *                 text: 'This button has a super long titl",1849456,57,"iconCls: 'home',\n *                 align: 'right'",889200,48,"    Ext.Viewport.setStyleHtmlContent(true);\n *     Ext.Viewport.setHtml('This shows how the title is automatically moved to the right when one of the aligned buttons is very wide.');\n *\n * <br />",1735457,65,"xtype: 'titlebar',\n *",1735584,35,"title: 'A very long title",887471,59,"align: 'left',\n *                 text: 'This button has a super long titl",1849456,57,"align: 'right',\n *                 text: 'Another button'",889200,48,"    Ext.Viewport.setStyleHtmlContent(true);\n *     Ext.Viewport.setHtml('This shows how the title and buttons will automatically adjust their size when the width of the items are too wide..');\n *\n * The {@link #defaultType} of Toolbar's is {@link Ext.Button button}.\n */\nExt.define('Ext.TitleBar",1079275,36,"xtype: 'titlebar',\n    // @private\n    isToolbar",1422000,49,1161135,74,"toolbar'",1023616,42,1839343,32,"ls: Ext.baseCSSPrefix + 'navigation-bar'",1194464,40,"i\n         * Style options for Toolbar. Either 'light' or 'dark'",1489488,44,1000695,40,"String} title\n         * The title of the toolbar",836480,43,"titl",1463135,46,"titleAlign\n         * The alignment for the title of the toolbar",836480,43,"titleAlign: 'center'",1194464,39,1035893,35,"xtype to cre",1838990,46,"defaultType: 'button'",1194464,39,742732,40,"height of the Toolbar",1037776,44,"inHeigh",930688,36,1023645,39,"ayout: {\n            type: 'hbox",1490256,42,1035158,51,"TitleBar. The {@link #defaultType} of\n         * a TitleBar is {@link Ext.Button}, so you do not need to specify an `xtype` if you are adding\n         * buttons",739464,37,"give items a `align` configuration which will align the item to the `left` or `right` of\n         * the TitleBar",836480,43,"item",1213885,36,"String} maxButtonWidth The maximum width of the button by percentag",1160591,43,"maxButtonWidth: '40%'\n    },",1187414,71,1187544,64,"titleAlign: 'left'\n        },",1187436,49,"Cupertino'\n            ],\n            maxButtonWidth: '80%'\n        }\n    ],\n    hasCSSMinHeight: true,\n    beforeI",1237696,32,"this.applyItems = this.applyInitialItems",549720,46,"delete this.applyItems;\n        this.add(this.initialItems);\n        delete this.initialItems",1024137,32,"painted: 'refreshTitlePosition',",866160,42,"},\n    applyInitial",891246,37,"me = this,\n            titleAlign = me.getTitleAlign()",1045672,41," || {};\n        me.initialItems = items;\n        me.leftBox = me.add({\n",1977929,33,"           style: 'position: relative',\n            layout: {\n   ",1927580,36,"       align: 'center'\n            }",962880,43,"resize: 'refreshTitlePosition',\n",1871343,38,"}\n        });\n        me.spacer = me.add({\n",993487,44,"style: 'position: relative',\n            flex: 1",962880,43,"resize: 'refreshTitlePosition',\n",1871343,38,"}\n        });\n        me.rightBox = me.add({\n",1977929,33,"           style: 'position: relative',\n            layout: {\n   ",1927580,36,"       align: 'center'\n            }",962880,43,"resize: 'refreshTitlePosition',\n",1871343,38,"}\n        });\n        switch (titleAlign) {\n            case 'left':\n                me.titleComponent = me.leftBox.add({\n ",1078934,32,"',\n        ",1839472,38,"title-align-left',\n                    hidden: defaults.hidde",1668256,34,"    me.refreshTitlePosition",783727,32,"break;\n            case 'right':\n                me.titleComponent = me.rightBox.add({\n ",1078934,32,"',\n        ",1839472,38,"title-align-right',\n                    hidden: defaults.hidde",1668256,34,"    me.refreshTitlePosition",783727,32,1977052,44,"me.titleComponent = me.add({\n ",1078934,32,"',\n                    hidden: defaults.hidden,\n                    centered",1950414,43,"break;\n        }\n        me.doAdd = me.doBoxAdd;\n        me.remove = me.doBoxRemove;\n        me.doInsert = me.doBoxInsert;\n    },\n    doBoxAdd: function(item) {\n        if (item.config.align == 'right') {\n            this.rightBox.add(item",963568,37,"leftBox.add(item);\n        }\n    },\n    doBoxR",1048924,41,"if (item.config.align == 'right') {\n            this.rightBox.remove(item, destroy",963568,37,"leftBox.remove(item, destroy);\n        }\n    },\n    doBoxI",1054875,39,"if (item.config.align == 'right') {\n            this.rightBox.insert(index",569680,38,"this.leftBox",1056802,36,"},\n    calculateMaxButtonWid",1182527,32,"ButtonWidth = this.getMaxButtonWidth();\n        //check if it is a percentage\n        if (Ext.isString(maxButtonWidth)) {\n            maxButtonWidth = parseInt(maxButtonWidth.replace('%', ''), 10);\n        }\n        maxButtonWidth = Math.round((this.element.getWidth() / 100) * maxButtonWidth);\n        return maxButtonWidth;\n    },\n    refreshTitlePosition",1969968,32,"isDestroy",1798784,44,"var titleElement = this.titleComponent.renderElement;\n        titleElement.setWidth(null);\n        titleElement.setLeft(null);\n        //set the min/max width of the left button\n        var leftBox = this.leftBox,\n            leftButton = leftBox.down('button'),\n            singleButton = leftBox.getItems().getCount() == 1,\n            leftBoxWidth, maxButtonWidth;\n        if (leftButton && singleButton) {\n            if (leftButton.getWidth() == null) {\n                leftButton.renderElement.setWidth('auto');\n            }\n            leftBoxWidth = leftBox.rend",868395,34,"maxButtonWidth = this.calculateMaxButtonWidth();\n            if (leftBoxWidth > maxButtonWidth) {\n                leftButton.renderElement.setWidth(maxButtonWid",1003775,33,"    var spacerBox = this.spacer.renderElement.getPageBox();\n   ",356464,35,"       titleElement.setWidth(spacerBox.width);\n        }\n        var titleBox = titleE",803472,33,"widthDiff = titleBox.width - spacerBox.width,\n            titleLeft = titleBox.left,\n            titleRight = titleBox.right,\n            halfWidthDiff, leftDiff, rightDiff;\n        if (widthDiff > 0) {\n            halfWidthDiff = widthDiff / 2;\n            titleLeft += halfWidthDiff;\n            titleRight -= halfWidthDiff;\n            titleElement.setWidth(spacerBox.width);\n        }\n        leftDiff = spacerBox.left - titleLeft;\n        rightDiff = titleRight - spacerBox.right;\n        if (leftDiff > 0) {\n            titleElement.setLeft(leftDiff);\n        } else if (rightDiff > 0) {\n            titleElement.setLeft(-rightDiff);\n        }\n        titleElement.repaint(",1840672,36,"Title: function(newTitle) {\n        this.titleComponent.setTitle(newTitle);\n        if (this.isPainted()) {\n            this.refreshTitlePosition",713376,32,1222138,37,1193303,731920,"This component is used in {@link Ext.navigation.View} to control animations in the toolbar. You should never need to\n * interact with the component directly, unless you are subclassing it.\n * @private\n * @author Robert Dougan <rob",1427705,33,"navigation.Bar', {\n    extend: Ext.TitleBar,\n    // @private\n    isToolbar",1422000,49,1161135,74,"toolbar'",1023616,42,1839343,32,"ls: Ext.baseCSSPrefix + 'navigation-bar'",1194464,40,"i\n         * Style options for Toolbar. Either 'light' or 'dark'",1489488,44,1000695,40,"String} title\n         * The title of the toolbar. You should NEVER set this, it is used internally. You set the title of the\n         * navigation bar by giving a navigation views children a title configuration.",746656,62,"titl",1161503,36,"\n         * @h",823440,45,"defaultType: 'button'",1023616,42,"ignor",1160591,43,"layout: {\n            type: 'hbox",1490256,42,1035158,51,"NavigationBar. The {@link #cfg-defaultType} of\n         * a NavigationBar is {@link Ext.Button}, so you do not need to specify an `xtype` if you are adding\n         * buttons",739464,37,"give items a `align` configuration which will align the item to the `left` or `right` of\n         * the NavigationBar.\n         * @h",823440,45,1089744,36,"BackButtonText\n         * The text to be displayed on the back button if:\n         * a) The previous view does not have a title\n         * b) The {@link #useTitleForBackButtonText} configuration is true.",746656,62,"defaultBackButtonText: 'Back'",1467168,40,"nimation",746656,62,"animation: {\n            duration: 300",170384,36,"cfg {Boolean} useTitleForBackButtonText\n         * Set to false if you always want to display the {@link #defaultBackButtonText} as the text\n         * on the back button. True if you want to use the previous views title.",746656,62,"useTitleForBackButtonTex",930688,38,"Ext.navigation.View} view A reference to the navigation view this bar is linked to.",746656,62,"view",1037824,46,"androidAnimation Optionally enable CSS transforms on Android 2\n         * for NavigationBar animations.  Note that this may cause flickering if the\n         * NavigationBar is hidde",1407296,44,"android2Transforms",1461664,38,"Ext.Button/Object} backButton The configuration for the back button",746656,62,"backButton: {\n            align: 'left',\n            ui: 'back',\n",1080849,33,"}\n    },",1187414,71,"Blackberry'\n            ],\n            animation: false\n        }\n    ],\n    /**\n     * @event back\n     * Fires when the back button was tapped.\n     * @param {Ext.navigation.Bar} this This bar",899536,53,1468766,35,"!config.items) {\n            config.items = [];\n        }\n        this.backButtonStack = [];\n        this.activeAnimations = [];",1520672,69,805072,32,"applyBackButton",1011435,36,"Ext.factory(config, Ext.Button, this.getBackButton()",974304,46,"updateBackButton: function(newBackButton, oldBackButton) {\n        if (oldBackButton) {\n            this.remove(oldBackButton);\n        }\n        if (newBackButton) {\n            this.add(newBackButton);\n            newBackButton.on({\n",789645,45,"tap: this.onBackButtonTap",1168959,38,"onBackButtonTa",846788,40,"back'",1244319,52,"updateView: function(newView",542384,39,"backButton = me.getBackButton(),\n            innerItems, i, backButtonText, item, title, titleText;\n        me.getItems();\n        if (newView) {\n            //update the back button stack with the current inner items of the view\n            innerItems = newView.getInnerItems",31002,32,"innerItems",220365,32,882555,34,"    title = (item.getTitle) ? item.getTitle() : item.config.title;\n                me.backButtonStack.push(title || '&nbsp;');\n            }\n            titleText = me.getTitleText();\n            if (titleText",939920,34,"titleText",1954764,33,"me.setTitle(titleText);\n            backButtonText = me.getBackButtonText();\n            if (backButtonText) {\n                backButton.setText(backButtonText);\n                backButton",876880,76,"onViewAdd: function(view",1054896,45,"backButtonStack = me.backButtonStack,\n            hasPrevious, title;\n        me.endAnimation();\n        title = (item.getTitle) ? item.getTitle() : item.config.title;\n        backButtonStack.push(title || '&nbsp;');\n        hasPrevious = backButtonStack.length > 1;\n        me.doChangeView(view, hasPrevious, false",974304,48,"ViewRemove: function(view",542384,39,"backButtonStack = me.backButtonStack,\n            hasPrevious;\n        me.endAnimation();\n        backButtonStack.pop();\n        hasPrevious = backButtonStack.length > 1;\n        me.doChangeView(view, hasPrevious, ",1238416,44,"/\n    doChangeView: function(view, hasPrevious, reverse",542384,39,"leftBox = me.leftBox,\n            leftBoxElement = leftBox.element,\n            titleComponent = me.titleComponent,\n            titleElement = titleComponent.element,\n            backButton = me.getBackButton(),\n            titleText = me.getTitleText(),\n            backButtonText = me.getBackButtonText(),\n            animation = me.getAnimation() && view.getLayout().getAnimation(),\n            animated = ",875293,34," && view.isPainted(),\n            properties, leftGhost, titleGhost, leftProps, titleProps;\n        if (animated) {\n            leftGhost = me.createProxy(leftBox.element);\n            leftBoxElement.setStyle('opacity', '0');\n            backButton.setText(backButtonText);\n            backButton[hasPrevious ? 'show' : 'hide']();\n            titleGhost = me.createProxy(titleComponent.element.getParent());\n            titleElement.setStyle('opacity', '0');\n            me.setTitle(titleText);\n            properties = me.measureView(leftGhost, titleGhost, reverse);\n            leftProps = properties.left;\n            titleProps = properties.title;\n            me.isAnimating = true;\n            me.animate(leftBoxElement, leftProps.element);\n            me.animate(titleElement, titleProps.element, function() {\n                titleElement.setLeft(properties.titleLeft);\n                me",1947808,34,"    me.refreshTitlePosition();",320877,33,"Ext.browser.is.AndroidStock2 && !this.getAndroid2Transforms()) {\n                leftGhost.ghost.destroy();\n                titleGhost.ghost.destroy(",1950032,42,".animate(leftGhost.ghost, leftProps.ghost);\n                me.animate(titleGhost.ghost, titleProps.ghost",1619696,35,"leftGhost.ghost.destroy();\n                    titleGhost.ghost.destroy();",790494,33,"}",1734784,34,"hasPrevious) {\n                backButton.setText(backButtonText);\n                backButton.show",120431,41,"backButton.hide",759615,33,"setTitle(titleTex",1119424,37,"alculates and returns the position values needed for the back button when you are pushing a title",1579172,32,"asureView: function(oldLeft, oldTitle, reverse",542384,39,"barElement = me.element,\n            newLeftElement = me.leftBox.element,\n            titleElement = me.titleComponent.element,\n            minOffset = Math.min(barElement.getWidth() / 3, 200),\n            newLeftWidth = newLeftElement.getWidth(),\n            barX = barElement.getX(),\n            barWidth = barElement.getWidth(),\n            titleX = titleElement.getX(),\n            titleLeft = titleElement.getLeft(),\n            titleWidth = titleElement.getWidth(),\n            oldLeftX = oldLeft.x,\n            oldLeftWidth = oldLeft.width,\n            oldLeftLeft = oldLeft.left,\n            useLeft = Ext.browser.is.AndroidStock2 && !this.getAndroid2Transforms(),\n            newOffset, oldOffset, leftAnims, titleAnims, omega, theta;\n        theta = barX - oldLeftX - oldLeftWidth",851088,37,"newOffset = theta;\n            oldOffset = Math.min(titleX - oldLeftWidth, minOffset",201616,32,"oldOffset = theta;\n            newOffset = Math.min(titleX - barX, minOffset);\n        }\n        if (useLeft) {\n            leftAnims = {\n                element: {\n        ",863642,36,"        left: newOffset,\n        ",863725,39,308140,32,"o: {",993553,58,"opacity: 1",18384,54,497471,32,"eftAnims = {\n                element: {\n        ",863642,36,"        transform: {\n                            translateX: newOffset\n    ",789051,43,"    opacity: 0",789050,44,"to: {",841814,34,": {\n                            translateX: 0\n    ",789051,43,"    opacity: 1",18384,40,",\n                ghost: {\n        ",863707,34,"        transform: {\n                            translateX: oldOffset\n    ",789051,43,"    opacity: 0",18384,54,";\n        }\n        theta = barX - titleX + newLeftWidth;\n        if ((oldLeftLeft + titleWidth) > titleX) {\n            omega = barX - titleX - titleWidth;\n        }\n",869739,35,"titleElement.setLeft(0);\n            oldOffset = barX + barWidth - titleX - titleWidth;\n            if (omega",651024,34,"newOffset = omega",346432,39,"newOffset = theta",501216,45,"newOffset = barX + barWidth - titleX - titleWidth;\n            if (omega",651024,34,"oldOffset = omega",346432,39,"oldOffset = theta;\n            }\n            newOffset = Math.max(titleLeft, newOffset);\n        }\n        if (useLeft) {\n            titleAnims = {\n                element: {\n        ",863642,36,"        left: newOffset,\n        ",863725,39,308140,32,"o: {\n                        left: titleLeft,\n        ",863725,39,52640,41,1050016,32,"itleAnims = {\n                element: {\n        ",863642,36,"        transform: {\n                            translateX: newOffset\n    ",789051,43,"    opacity: 0",789050,44,"to: {",841814,34,": {\n                            translateX: titleLeft\n    ",789051,43,"    opacity: 1",18384,40,",\n                ghost: {\n        ",863707,34,"        transform: {\n                            translateX: oldOffset\n    ",789051,43,"    opacity: 0",18384,54,1112815,41,"left: leftAnims,\n            title: titleAnims,\n            titleLeft: titleLeft",900688,34,"Helper method used to animate elements.\n     * You pass it an element, objects for the from and to positions an option onEnd callback called when the animation is over.\n     * Normally this method is passed configurations returned from the methods such as #measureTitle(true) etc.\n     * It is called from the #pushLeftBoxAnimated, #pushTitleAnimated, #popBackButtonAnimated and #popTitleAnimated\n     * methods.\n     *\n     * If the current device is Android, it will use top/left to animate.\n     * If it is anything else, it will use transform.\n     * @private\n     */\n    animate: function(element, ",334588,32,"me = this,\n            animation;\n        //reset the left of the element\n        element.setLeft(0);\n        config = Ext.apply(config, ",1776079,44,"easing: 'ease-in-out',\n            duration: me.getAnimation().duration || 250,\n",1958896,34,"\n        });\n        a",791798,32,"config);\n",1062492,62,"if (callback)",283819,33,"me);",1417989,39,"Ext.Animator.run(animation);\n        me.activeAnimations.push(animation);\n    },\n    end",980495,32,"var activeAnimations = this.activeAnimations,\n            animation, i, ln;\n        if (activeAnimations) {\n            ln = activeAnimation",1322960,65,"animation = activeAnimations[i];\n                if (animation",868142,32,"    animation.stopAnimation(",324991,49,1062664,32,1279696,33,"his.activeAnimations = [];\n        }\n    },\n    refreshTitlePosi",707520,64,1968462,33,"},\n    /**\n     * Returns the text needed for the current back button at anytime",1385518,33,"BackButtonText: function() {\n        var text = this.backButtonStack[this.backButtonStack.length - 2],\n            useTitleForBackButtonText = this.getUseTitleForBackButtonText();\n        if (!useTitleForBackButtonText) {\n            if (text) {\n                text = this.getDefaultBackButtonText",900144,43,"tex",1491535,37,"text needed for the current title at anytime",1385518,33,"TitleTex",559808,36,"backButtonStack[this.backButtonStack",1330623,36,"Handles removing back button stacks from this bar\n     * @private\n     */\n    beforePop: function(count) {\n        count--;\n        for (var i = 0; i < count; i++) {\n            this.backButtonStack.pop",1578815,36,"We override the hidden method because we don't want to remove it from the view using display:none. Instead we just position it off\n     * the screen, much like the navigation bar proxy. This means that all animations, pushing, popping etc. all still work when if you hide/show\n     * this bar at any time.",1062777,34,787566,35,"if (!hidden",776606,32,"Style({\n                position: 'relative',\n                top: 'auto',\n                left: 'auto',\n                width: 'auto'",1948032,51,"element.setStyle({\n                position: 'absolute',\n                top: '-1000px',\n                left: '-1000px',\n                width: this.element.getWidth() + 'px'",1168959,49,"Creates a proxy element of the passed element, and positions it in the same position, using absolute positioning.\n     * The createNavigationBarProxy method uses this to create proxies of the backButton and the title elements.\n     * @private\n     */\n    createProxy",429228,34,"ghost, x, y, left, width;\n        ghost = element.dom.cloneNode(true);\n        ghost.id = element.id + '-proxy';\n        //insert it into the toolbar\n        element.getParent().dom.appendChild(ghost);\n        //set the x/y\n        ghost = Ext.get(ghost);\n        x = element.getX();\n        y = element.getY();\n        left = element.getLeft();\n        width = element.getWidth();\n        ghost.setStyle('position', 'absolute');\n        ghost.setX(x);\n        ghost.setY(y);\n        ghost.setHeight(element.getHeight());\n        ghost.setWidth(width);",968526,52,",\n            left: left,\n",444168,38,"ghost: ghos",1125712,33,"uthor Robert Dougan <rob@sencha.com>\n *\n * NavigationView is basically a {@link Ext.Container} with a {@link Ext.layout.Card card} layout, so only one view\n * can be visible at a time. However, NavigationView also adds extra functionality on top of this to allow\n * you to `push` and `pop` views at any time. When you do this, your NavigationView will automatically animate\n * between your current active view, and the new view you want to `push`, or the previous view you want to `pop`.\n *\n * Using the NavigationView is very simple. Here is a basic example of it in ac",585053,32,"var view = Ext.create('Ext.NavigationView",729343,36,"\n *",259026,34,"title: 'First",259017,47,"xtype: 'button',\n *                 text: 'Push a new view!',\n *",1836694,62,"// use the push() method to push another view. It works much like\n *                     // add() or setActiveItem(). it accepts a view instance, or you can give it\n *                     // a view config.\n *                     view.push({\n *                         title: 'Second',\n *                         html: 'Second view!'\n *    ",1496638,36,"    }\n *             }]\n *         }]\n *     });\n *\n * Now, here comes the fun part: you can push any view/item into the NavigationView, at any time, and it will\n * automatically handle the animations between the two views, including adding a back button (if necessary)\n * and showing the new title.\n *\n *     view.push({\n *         title: 'A new view',\n *         html: 'Some new content'",955218,34,"it is as simple as calling the {@link #method-push} method, with a new view (instance or object). Done.\n *\n * You can also `pop` a view at any time. This will remove the top-most view from the NavigationView, and animate back\n * to the previous view. You can do this using the {@link #method-pop} method (which requires no arguments).\n *\n *     view.pop();\n *\n *  Applications that need compatibility with ##Older Android## devices will want to see the {@link #layout} config for details on\n *  disabling navigation view animations as these devices have poor animation support and performance.\n *\n * @aside guide navigation_view\n */\nExt.define('Ext.navigation.View",1079275,61,"NavigationView',\n    xtype: 'navigationview'",853552,43,1161135,74,"navigationview",1000703,39,"/Object} navigationBar\n         * The NavigationBar used in this navigation view. It defaults to be docked to the top",739464,32,"just pass in a normal object if you want to customize the NavigationBar.",1390800,40,"navigationBar: {\n         *         ui: 'dark',\n         *         docked: 'bottom",1468080,41,"You **cannot** specify a *title* property in this configuration. The title of the navigationBar is taken\n         * from the configuration of this views children",1214492,32,".push({\n         *         title: 'This views title which will be shown in the navigation bar',\n         *         html: 'Some HTML",149855,43,1229200,32,"vigationBar: {\n            docked: 'top",1490256,42,"String} defaultBackButtonText\n         * The text to be displayed on the back button if:\n         *\n         * - The previous view does not have a title.\n         * - The {@link #useTitleForBackButtonText} configuration is `true",1161984,44,"defaultBackButtonText: 'Back",1089423,44,"TitleForBackButtonText\n         * Set to `false` if you always want to display the {@link #defaultBackButtonText} as the text\n         * on the back button. `true` if you want to use the previous views titl",1838992,44,"useTitleForBackButtonTex",1400544,39,1035158,51,"NavigationView",1035218,272,"title: 'My title',",1034858,35,1035497,92,"\n         * If you want a title to be displayed in the {@link #navigationBar}, you must specify a `title` configuration in your\n         * view, like above.",520411,33,"Only one view will be visible at a time. If you want to change to another view, use the {@link #method-push} or\n         * {@link #setActiveItem} metho",1570384,45,"/**\n         * @cfg {Object}\n         * Layout used in this navigation view, type must be set to 'card'.\n         * **Android NOTE:** Older Android devices have poor animation performance. It is recommended to set the animation to null",1035296,41," layout: {\n         *          type: 'card',\n         *          animation: null",959820,41,1928223,38,"{\n            type: 'card',\n            animation: {\n                duration: 300,\n    ",863610,44,"    type: 'slide',\n                direction: 'left'",345744,47,"@event push\n     * Fires when a view is pushed into this navigation view\n     * @param {Ext.navigation.View",756912,36," @param {Mixed} view The view that has been pushed",1159596,32,"op\n     * Fires when a view is popped from this navigation view\n     * @param {Ext.navigation.View",756912,36," @param {Mixed} view The view that has been popp",1640727,33,"back\n     * Fires when the back button in the navigation view was tapped.\n     * @param {Ext.navigation.View} this The component instance\\\n",1187407,78,"Blackberry'\n            ],\n            navigationBar: {\n                splitNavigation: true\n            }",1839801,98,"navBar = me.getNavigationBar();\n        //add a listener onto the back button in the navigationbar\n        if (navBar) {\n            navBar.on({\n                back: me.onBackButtonTap,\n",1871343,38,"});\n            me.relayEvents(navBar, 'rightbuttontap');\n            me.relayEvents(me, {\n                add: 'push',\n                remove: 'pop'",857600,35,"var layout = me",837436,32," && !layout.isCard",931807,33,"'The base layout for a NavigationView must always be a Card Layout'",1196544,61,"Layout",1660330,60,1216971,52," Called when the user taps on the back button\n     */\n    onBackButtonTap: function() {\n        this.pop();\n        this.fireEvent('back",876088,32,"Pushes a new view into this navigation view using the default animation that this view has.\n     * @param {Object} view The view to push",1050751,33,"The new item you just pushed.\n     */\n    push: function(view) {\n        return this.add(view);",1676128,35,"current active view from the stack and sets the previous view using the default animation\n     * of this view. You can also pass a",1068976,36," to target what inner item to pop to.\n     * @param {Number/String/Object} count If a Number, the number of views you want to pop. If a String, the pops to a matching\n     * component query. If an Object, the pops to a matching view instance",1050751,33,"The new active item\n     */\n    pop",1348029,32,"this.beforePop(count)) {\n            return this.doPop(",1196544,50," Calculates whether it needs to remove any items from the stack when you are popping more than 1\n     * item. If it does, it removes those views from the stack and returns `true`",416208,37,"it has removed views.\n     */\n    beforePop: function(coun",1120095,40,1049030,45,"Ext.isString(count) || Ext.isObject(count)) {\n            var last = innerItems.length - 1",1325004,42,"last; i >= 0; i--) {\n                if ((Ext.isString(count) && Ext.ComponentQuery.is(innerItems[i], count)) || (Ext.isObject(count) && count == innerItems[i])) {\n                    count = last - i",382361,69,"    if (!Ext.isNumber(count)",44000,56,"}\n        var ln = innerItems.length,\n            toRemove;\n        //default to 1 pop\n        if (!Ext.isNumber(count) || count < 1) {\n            count = 1;\n        }\n        //check if we are trying to remove more items than we have\n        count = Math.min(count, ln - 1);\n        if (count) {\n            //we need to reset the backButtonStack in the navigation bar\n            me.getNavigationBar().beforePop(count);\n            //get the items we need to remove from the view and remove theme\n            toRemove = innerItems.splice(-count, count - 1);\n            for (i = 0; i < toRemove",220365,32,"this.remove(toRemove",1726064,38,1297968,32,"fals",1216848,46,"doPop",900368,50,1060175,45,"set the new active item to be the new last item of the stack\n        me.remove(innerItems[innerItems.length - 1]);\n        // Hide the backButton\n        if (innerItems.length < 3 && this.$backButton) {\n            this.$backButton.hide();\n        }\n        // Update the title container\n        if (this.$titleContainer) {\n            if (!this.$titleContainer.setTitle",1662330,38,"You have selected to display a title in a component that does not                     support titles in NavigationView. Please remove the `title` configuration from your                     NavigationView item, or change it to a component that has a `setTitle` method.'",57296,33,"item = innerItems[innerItems.length - 2];\n            this.$titleContainer.setTitle((item.getTitle) ? item.getTitle() : item.config.title",522127,33,"getActiveItem(",492288,37,"previous item, if one exists.\n     * @return {Mixed} The previous view\n     */\n    getPreviousItem",895163,32,1060180,38,"return innerItems[innerItems.length - 2]",1170368,36,"backbutton text accordingly in the {@link #navigationBar}",969200,35,"UseTitleForBackButtonText: function(useTitleForBackButtonText) {\n        var navigationBar = this.getNavigationBar();\n        if (navigationBar) {\n            navigationBar.setUseTitleForBackButtonText(useTitleForBackButtonTex",1119424,36,"Updates the backbutton text accordingly in the {@link #navigationBar}",969200,35,"DefaultBackButtonText: function(defaultBackButtonText) {\n        var navigationBar = this.getNavigationBar();\n        if (navigationBar) {\n            navigationBar.setDefaultBackButtonText(defaultBackButtonTex",1119424,36,"This is called when an Item is added to the BackButtonContainer of a SplitNavigation View\n     * @private\n     *\n     * @param toolbar\n     * @param item\n     */\n    onBackButtonContainerAdd: function(toolbar, item) {\n        item.on({",1776155,38,"show: this.refreshBackButtonContainer,\n            hide: this.refreshBackButtonContainer",971206,33,"BackButtonContainer()",303496,32,"called when an Item is removed from the BackButtonContainer of a SplitNavigation View\n     * @private\n     *\n     * @param toolbar\n     * @param item\n     */\n    onBackButtonContainerRemove: function(toolbar, item) {\n        item.un({",1776155,38,"show: this.refreshBackButtonContainer,\n            hide: this.refreshBackButtonContainer",971206,33,"BackButtonContainer()",303496,32,"used for Blackberry SplitNavigation to monitor the state of child items in the bottom toolbar.\n     * if no visible children exist the toolbar will be hidden",967937,36,"BackButton",718876,32,"if (!this.$backButtonContainer",550175,46,"i = 0,\n            backButtonContainer = this.$backButtonContainer,\n            items = backButtonContainer.items",908974,39,"items.length",1317744,33,".get(i);\n            if (!item",1951711,36,"$backButtonContainer.show(",505008,64,"$backButtonContainer.hide(",1174079,35,"NavigationBar",1019056,33,"me = this",1660816,37,"config = {\n                hidden: true,\n                docked: 'top",544576,35,"if (config.title) {\n            delete config.title;\n            Ext.Logger.warn(\"Ext.navigation.View: The 'navigationBar' configuration does not accept a 'title' property. You \" + \"set the title of the navigationBar by giving this navigation view's children a 'title' property.\");\n        }\n        config.view = this;\n        config.useTitleForBackButtonText = this.getUseTitleForBackButtonText();\n        // Blackberry specific nav setup where title is on the top title bar and the bottom toolbar is used for buttons and BACK\n        if (config.splitNavigation) {\n            this.$titleContainer = this.add({\n",1735577,32,1078938,35,"               ui: 'light',\n                title: this.$currentTitle || ''\n            });\n            var containerConfig = (config.splitNavigation === true) ? {} : config.splitNavigation;\n            this.$backButtonContainer = this.add({\n",536651,39,"           docked: 'bottom',\n",1080845,41,"});\n            // Any item that is added to the BackButtonContainer should be monitored for visibility\n            // this will allow the toolbar to be hidden when no items exist in it.\n            this.$backButtonContainer.on({\n    ",1491008,35,"    add: me.onBackButtonContainerAdd,\n                remove: me.onBackButtonContainerRemov",1958793,35,"$backButton = this.$backButtonContainer.add({\n",536815,38,"           text: 'Back',\n                hidden: true,\n                ui: 'back'",1943250,32,"Default config items go into the bottom bar\n            if (config.items) {\n                this.$backButtonContainer.add(config.items",17472,32,"If the user provided items and splitNav items, default items go into the bottom bar, split nav items go into the top\n            if (containerConfig.items) {\n                this.$titleContainer.add(containerConfig.item",1064847,35,"$backButton.on({\n",789645,45,"tap: this.onBackButtonTap\n            })",1217644,41,"hidden: true,\n                docked: 'top",544576,42,"Ext.factory(config, Ext.navigation.Bar, this.getNavigationBar()",1840672,36,"NavigationBar: function(newNavigationBar, oldNavigationBar) {\n        if (oldNavigationBar) {\n            this.remove(oldNavigationBar, true);\n        }\n        if (newNavigationBar) {\n            this.add(newNavigationBar",1196544,61,1060109,66,"me = this",1049016,55,1060218,55,"me.getItems();\n        // If we are not initialzed yet, we should set the active item to the last item in the stack\n        if (!me.initialized) {",1060572,36,".length - 1",522128,32,"callParent([\n            activeItem,\n            currentActiveItem\n        ])",1049896,63,"var me = this",1049016,45,",\n            animation = me.getLayout().getAnimation();\n        if (innerIndex > 0) {\n    ",875281,62,"    animation.setRevers",17466,35,"me.setActiveItem(innerIndex - 1);\n            me.getNavigationBar().onViewRemove(me, innerItems[innerIndex], innerI",1057776,60,"doRemove: function() {\n        var animation = this.getLayout().getAnimation();",875280,76,"Reverse(false",707999,54,1954880,40,1057140,41,"// Check for title configuration\n        if (item && item.getDocked() && item.config.title === true) {\n            this.$titleContainer",1321364,32,1057186,38,"var navigaitonBar = this.getInitialConfig().navigationBar;\n        if (!this.isItemsInitializing && ",883118,39,"setActiveItem(item);\n            // Update the navigationBar\n            if (navigaitonBar) {\n                this.getNavigationBar().onViewAdd(this, item, index",17472,32,"Update the custom backButton\n            if (this.$backButtonC",719038,33,"$backButton",876880,37,"    if (item && ",883118,34,"// Update the title container title\n            this.updateTitleContainerTitle((item.getTitle) ? item.getTitle() : item.config.titl",1814792,32,"nitialized",974495,32,1057276,47,"/**\n     * @private\n     * Updates the title of the titleContainer, if it exists\n     */\n    updateTitleContainerTitle: function(title) {\n        if (this.$titleContainer) {\n            if (!this.$titleContainer.setTitle",1662330,38,"You have selected to display a title in a component that does not                     support titles in NavigationView. Please remove the `title` configuration from your                     NavigationView item, or change it to a component that has a `setTitle` method.'",1064848,34,"$titleContainer.setTitle(title",963568,37,"$currentTitle = title",1329568,36,"sets the view by removing all items between the first and last item",1050751,33,"The view that is now active",1192332,41,"return this.pop(this.getInnerItems().length",866559,32,1925234,53992,"\n        items:",1006656,33,"xtype: 'label',\n                html: 'label1'",1135584,46,"xtype: 'button',\n                text: 'GO TO Contact'\n            }\n        ]\n    }\n});\n\n/*\n * File: app/view/MainNav",1994224,519,"ainNavView', {\n    extend: Ext.navigation.View,\n    config: {\n        items:",1006656,33,"xtype: 'HomeView'\n            }\n        ]\n    ",1979226,23088,",\n        'MainNav",2002309,143,"MainNav",2002456,115]
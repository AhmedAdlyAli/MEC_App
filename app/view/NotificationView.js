/*
 * File: app/view/NotificationView.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MEC_App.view.NotificationView', {
    extend: 'Ext.Panel',
    alias: 'widget.NotificationView',

    requires: [
        'Ext.Label',
        'Ext.dataview.List',
        'Ext.XTemplate'
    ],

    config: {
        itemId: 'NotificationView',
        layout: 'fit',
        scrollable: false,
        cls: [
            'complaint-view',
            'rtl'
        ],
        items: [
            {
                xtype: 'label',
                cls: 'inners-title',
                docked: 'top',
                html: 'الإشعارات'
            },
            {
                xtype: 'list',
                height: '100%',
                itemId: 'lstItems',
                itemCls: 'item-notification',
                itemTpl: Ext.create('Ext.XTemplate', 
                    '<div>{content} </div>',
                    '<div class=\'notification-sub\'>{[this.FormatDate(values.date)]}</div>',
                    {
                        FormatDate: function(str) {
                            return Ext.Global.FormatDate(str);


                        }
                    }
                )
            }
        ]
    },

    initialize: function() {
        this.callParent();


        var view = this;//me.getMyBusinessView();


        Ext.AnimationHelper.ShowLoading();

        //alert('loading');


        var requestData = {
            "serviceId": "11",
            "token": Ext.Global.userToken,
            "language": "ar",
            "identityType": 'QID',//Ext.Global.identityType,
            "identityNum": Ext.Global.identityNum,
            "identityNationality":  Ext.Global.identityNationality
        };


        var me = this;

        Ext.Ajax.request({

            url : Ext.Global.GetConfig('webServiceUrl'),
            method : 'POST',
            jsonData :requestData,
            success : function (response) {

                Ext.AnimationHelper.HideLoading();




                var json = Ext.util.JSON.decode(response.responseText);

                if(json.listOfMecMyNotificationsIo.mecAction.length>0)
                {
                    var store = new Ext.data.Store({
                        data : json.listOfMecMyNotificationsIo.mecAction
                    });

                    var lst = view.down('#lstItems');
                    lst.setStore(store);
                }else	{


                            Ext.device.Notification.show({
                                title: Ext.Localization.GetMessage('Error'),
                                buttons:[Ext.Localization.GetMessage('OK')],
                                message: Ext.Localization.GetMessage('NoData')
                            });




                }



            }
        });












    }

});